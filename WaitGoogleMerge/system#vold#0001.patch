From be1d71f7a5b28bc11c696fe068059857db583906 Mon Sep 17 00:00:00 2001
From: Baocheng Sun <baocheng.sun@amlogic.com>
Date: Thu, 01 Feb 2018 16:09:12 +0800
Subject: [PATCH] vold: create volume for some type of vfat udisks [1/2]

PD#SWPL-39183

Problem:
AOSP code can't recognize the following type of vfat udisks
1. entire disk as partiton but can detect several parts
2. file system check error

Solution:
1.try to access physical dev for several times
2.Continue to try mount even file system check error

Verify:
locally

Change-Id: I39f3c9f2ce379bdb25540a1d9dabfb6755187260
---

diff --git a/model/Disk.cpp b/model/Disk.cpp
index 4df4e9d..1d8b913 100644
--- a/model/Disk.cpp
+++ b/model/Disk.cpp
@@ -320,6 +320,59 @@
     return OK;
 }
 
+bool Disk::isEntireDiskAsPartition(const int part) {
+    int iPos = mSysPath.find("/block/");
+    if (iPos < 0 || part < 1) {
+        LOG(INFO) << "can not find block dir.";
+        return false;
+    }
+    std::string physicalDev = StringPrintf("/dev/block/%s",
+            mSysPath.substr(iPos + 7).c_str());
+
+    int retry = 8;
+    while (true) {
+        int ret = access(physicalDev.c_str(), F_OK);
+        if (ret) {
+            LOG(INFO) << "fail to access physical dev:" << physicalDev;
+            retry--;
+            usleep(50000);
+        } else {
+            break;
+        }
+        if ( !retry) {
+            LOG(INFO) << "physical dev: " << physicalDev << " doesn't exist";
+            return false;
+        }
+    }
+
+    std::string partDevName;
+    for (int i = 1; i <= part; i++) {
+        if (mFlags & Flags::kUsb) {
+            partDevName = StringPrintf("%s%d", physicalDev.c_str(), i);
+        } else if (mFlags & Flags::kSd) {
+            partDevName = StringPrintf("%sp%d", physicalDev.c_str(), i);
+        }
+        retry = 4;
+        while (true) {
+            int ret = access(partDevName.c_str(), F_OK);
+            if (ret) {
+                retry--;
+                usleep(50000);
+            } else {
+                LOG(INFO) << "now can access :" << partDevName;
+                return false;
+            }
+            if ( !retry) {
+                LOG(INFO) << "physical dev: " << partDevName << " doesn't exist";
+                break;
+            }
+        }
+    }
+
+    LOG(INFO) << "physical dev: " << physicalDev << "[1-" << part << "] doesn't exist";
+    return true;
+}
+
 status_t Disk::readPartitions() {
     int maxMinors = getMaxMinors();
     if (maxMinors < 0) {
@@ -382,6 +435,11 @@
                     LOG(WARNING) << "Invalid partition type " << *it;
                     continue;
                 }
+                if (isEntireDiskAsPartition(i)) {
+                    LOG(INFO) << "don't create public:xx,xx for physical device only!";
+                    foundParts = false;
+                    break;
+                }
 
                 switch (type) {
                     case 0x06:  // FAT16
@@ -391,6 +449,13 @@
                     case 0x0e:  // W95 FAT16 (LBA)
                         createPublicVolume(partDevice);
                         break;
+                    default :
+                        // We should still create public volume here
+                        // cause some udisk partition types are not matched above
+                        // but can be mounted successfully
+                        createPublicVolume(partDevice);
+                        LOG(WARNING) << "unsupported table kMbr part type " << type;
+                        break;
                 }
             } else if (table == Table::kGpt) {
                 if (++it == split.end()) continue;
diff --git a/model/Disk.h b/model/Disk.h
index 99c98fc..62fa635 100644
--- a/model/Disk.h
+++ b/model/Disk.h
@@ -86,6 +86,8 @@
     status_t partitionPrivate();
     status_t partitionMixed(int8_t ratio);
 
+    bool isEntireDiskAsPartition(const int part);
+
   private:
     /* ID that uniquely references this disk */
     std::string mId;
diff --git a/model/PublicVolume.cpp b/model/PublicVolume.cpp
index d40e3e3..e5e15df 100644
--- a/model/PublicVolume.cpp
+++ b/model/PublicVolume.cpp
@@ -103,12 +103,12 @@
     if (mFsType == "vfat" && vfat::IsSupported()) {
         if (vfat::Check(mDevPath)) {
             LOG(ERROR) << getId() << " failed filesystem check";
-            return -EIO;
+            //return -EIO;
         }
     } else if (mFsType == "exfat" && exfat::IsSupported()) {
         if (exfat::Check(mDevPath)) {
             LOG(ERROR) << getId() << " failed filesystem check";
-            return -EIO;
+            //return -EIO;
         }
     } else {
         LOG(ERROR) << getId() << " unsupported filesystem " << mFsType;
