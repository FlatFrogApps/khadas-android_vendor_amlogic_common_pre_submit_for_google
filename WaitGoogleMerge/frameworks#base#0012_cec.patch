From 6859468d0878b4310f73d301041685323eaa82d8 Mon Sep 17 00:00:00 2001
From: "an.xi" <an.xi@amlogic.com>
Date: Mon, 8 Nov 2021 19:07:51 +0800
Subject: [PATCH] cec: make sure mute key works all right for audio system
 [1/1]

PD#SWPL-61812

Problem:
The mute key may fail to control the audio system device.

Solution:
1.Update the mute status in HdmiCecLocalDeviceTv.
2.No need to change turn off system audio mode if earc is on.

Verify:
t982_r301

Change-Id: I68db74701146529a67fb5b2c0a655210a9632b26
Signed-off-by: an.xi <an.xi@amlogic.com>
---
 .../server/hdmi/HdmiCecFeatureAction.java     |  1 +
 .../server/hdmi/HdmiCecLocalDeviceTv.java     | 11 +++--
 .../server/hdmi/SystemAudioStatusAction.java  |  2 +-
 .../server/hdmi/VolumeControlAction.java      | 40 ++++++++-----------
 4 files changed, 26 insertions(+), 28 deletions(-)
 mode change 100755 => 100644 services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java

diff --git a/services/core/java/com/android/server/hdmi/HdmiCecFeatureAction.java b/services/core/java/com/android/server/hdmi/HdmiCecFeatureAction.java
index 9c6d018583bc..98956addb4fc 100644
--- a/services/core/java/com/android/server/hdmi/HdmiCecFeatureAction.java
+++ b/services/core/java/com/android/server/hdmi/HdmiCecFeatureAction.java
@@ -240,6 +240,7 @@ abstract class HdmiCecFeatureAction {
     }
 
     void finish(boolean removeSelf) {
+        HdmiLogger.debug("finish " + this);
         clear();
         if (removeSelf) {
             removeAction(this);
diff --git a/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java b/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java
old mode 100755
new mode 100644
index a780f06482d9..6e6f39e667fa
--- a/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java
+++ b/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java
@@ -1121,7 +1121,9 @@ final class HdmiCecLocalDeviceTv extends HdmiCecLocalDevice {
     }
 
     void setAudioStatus(boolean mute, int volume) {
+        HdmiLogger.debug("setAudioStatus mute:" + mute + " vol:" + volume);
         if (!isSystemAudioActivated() || !mService.isHdmiCecVolumeControlEnabled()) {
+            HdmiLogger.error("setAudioStatus return for no audio control or disabled");
             return;
         }
         synchronized (mLock) {
@@ -1142,7 +1144,7 @@ final class HdmiCecLocalDeviceTv extends HdmiCecLocalDevice {
         HdmiLogger.info("changeVolume curVolume=" + curVolume
                     + " delta=" + delta + " mSystemAudioVolume=" + mSystemAudioVolume);
         // Mute status should be updated with volume up and down key besides mute key.
-        updateMuteWithVolumeKey(curVolume, delta);
+        //updateMuteWithVolumeKey(curVolume, delta);
         if (getAvrDeviceInfo() == null) {
             // On initialization process, getAvrDeviceInfo() may return null and cause exception
             return;
@@ -1190,15 +1192,18 @@ final class HdmiCecLocalDeviceTv extends HdmiCecLocalDevice {
         assertRunOnServiceThread();
         if (getAvrDeviceInfo() == null || !mService.isHdmiCecVolumeControlEnabled()) {
             // On initialization process, getAvrDeviceInfo() may return null and cause exception
-            return;
+            // return;
         }
-        HdmiLogger.debug("[A]:Change mute:%b mSystemAudioMute:%b", mute, mSystemAudioMute);
+        HdmiLogger.debug("[A]:Change mute:%b previous Mute:%b", mute, mSystemAudioMute);
+
         synchronized (mLock) {
             if (mSystemAudioMute == mute) {
                 HdmiLogger.debug("No need to change mute.");
                 return;
             }
         }
+
+        mSystemAudioMute = mute;
         if (!isSystemAudioActivated()) {
             HdmiLogger.debug("[A]:System audio is not activated.");
             return;
diff --git a/services/core/java/com/android/server/hdmi/SystemAudioStatusAction.java b/services/core/java/com/android/server/hdmi/SystemAudioStatusAction.java
index 5d913d12b79f..bfe42e524290 100644
--- a/services/core/java/com/android/server/hdmi/SystemAudioStatusAction.java
+++ b/services/core/java/com/android/server/hdmi/SystemAudioStatusAction.java
@@ -92,7 +92,7 @@ final class SystemAudioStatusAction extends HdmiCecFeatureAction {
 
         if (!(tv().isSystemAudioActivated() ^ mute)) {
             // Toggle AVR's mute status to match with the system audio status.
-            sendUserControlPressedAndReleased(mAvrAddress, HdmiCecKeycode.CEC_KEYCODE_MUTE);
+            //sendUserControlPressedAndReleased(mAvrAddress, HdmiCecKeycode.CEC_KEYCODE_MUTE);
         }
         finishWithCallback(HdmiControlManager.RESULT_SUCCESS);
     }
diff --git a/services/core/java/com/android/server/hdmi/VolumeControlAction.java b/services/core/java/com/android/server/hdmi/VolumeControlAction.java
index 2cc5e6f26bae..d39fc34ed5ce 100644
--- a/services/core/java/com/android/server/hdmi/VolumeControlAction.java
+++ b/services/core/java/com/android/server/hdmi/VolumeControlAction.java
@@ -23,9 +23,6 @@ import static com.android.server.hdmi.HdmiConfig.IRT_MS;
 import static com.android.server.hdmi.HdmiConfig.TIMEOUT_MS;
 
 import android.media.AudioManager;
-import android.widget.Toast;
-
-import com.android.internal.R;
 
 /**
  * Feature action that transmits volume change to Audio Receiver.
@@ -110,14 +107,16 @@ final class VolumeControlAction extends HdmiCecFeatureAction {
         mActionTimer.clearTimerMessage();
         // android input key time interval is 50ms.
         addTimer(STATE_WAIT_FOR_NEXT_VOLUME_PRESS, IRT_MS);
-        addTimer(STATE_WAIT_FOR_REPORT_AUDIO_STATUS, TIMEOUT_MS * 2);
+        addTimer(STATE_WAIT_FOR_REPORT_AUDIO_STATUS, TIMEOUT_MS);
     }
 
     void handleVolumeChange(boolean isVolumeUp) {
-        HdmiLogger.info("Volume Key Status Changed[old:%b new:%b]", mIsVolumeUp, isVolumeUp);
-        // The time interval of android key events is 50ms, and just fire them.
-        mIsVolumeUp = isVolumeUp;
-        sendVolumeKeyPressed();
+        if (mIsVolumeUp != isVolumeUp) {
+            HdmiLogger.debug("Volume Key Status Changed[old:%b new:%b]", mIsVolumeUp, isVolumeUp);
+            sendVolumeKeyReleased();
+            mIsVolumeUp = isVolumeUp;
+            sendVolumeKeyPressed();
+        }
         updateLastKeyUpdateTime();
     }
 
@@ -147,11 +146,9 @@ final class VolumeControlAction extends HdmiCecFeatureAction {
         int volume = HdmiUtils.getAudioStatusVolume(cmd);
         mLastAvrVolume = volume;
         mLastAvrMute = mute;
-        HdmiLogger.info("update volume state form avr[mute:%b, volume=%d]", mute, volume);
+        HdmiLogger.debug("volume form avr[mute:%b, volume=%d]", mute, volume);
         if (shouldUpdateAudioVolume(mute)) {
-            HdmiLogger.info("Update TV's volume to be in accord with the avr");
-            showHint();
-
+            HdmiLogger.debug("Force volume change[mute:%b, volume=%d]", mute, volume);
             tv().setAudioStatus(mute, volume);
             mLastAvrVolume = UNKNOWN_AVR_VOLUME;
             mLastAvrMute = false;
@@ -195,28 +192,23 @@ final class VolumeControlAction extends HdmiCecFeatureAction {
         int currentVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
         HdmiLogger.debug("final tv current volume=%d, avr volume=%d", currentVolume, mLastAvrVolume);
         if ((mLastAvrVolume != UNKNOWN_AVR_VOLUME) && (currentVolume != mLastAvrVolume)) {
-            showHint();
             tv().setAudioStatus(mLastAvrMute, mLastAvrVolume);
             mLastAvrVolume = UNKNOWN_AVR_VOLUME;
             mLastAvrMute = false;
         }
     }
 
-    private void showHint() {
-        Toast hint =Toast.makeText(tv().getService().getContext(), R.string.sync_audio_system_volume,
-            Toast.LENGTH_LONG);
-        hint.show();
-    }
-
     @Override
     void handleTimerEvent(int state) {
         if (state == STATE_WAIT_FOR_NEXT_VOLUME_PRESS) {
-            if (mSentKeyPressed
-                && (System.currentTimeMillis() - mLastKeyUpdateTime >= IRT_MS)) {
-                sendVolumeKeyReleased();
-                mSentKeyPressed = false;
+            if (mSentKeyPressed) {
+                if ((System.currentTimeMillis() - mLastKeyUpdateTime >= IRT_MS)) {
+                    sendVolumeKeyReleased();
+                    mSentKeyPressed = false;
+                } else {
+                    sendVolumeKeyPressed();
+                }
             }
-            return;
         } else if (state == STATE_WAIT_FOR_REPORT_AUDIO_STATUS) {
             HdmiLogger.info("VolumeControlAction timeout for report audio status");
             finish();
-- 
2.26.1

