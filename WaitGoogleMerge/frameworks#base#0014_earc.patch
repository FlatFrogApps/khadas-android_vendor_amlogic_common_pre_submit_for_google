From 1cfbdbef816ab86333fccb74ff217bc7031e8915 Mon Sep 17 00:00:00 2001
From: "an.xi" <an.xi@amlogic.com>
Date: Thu, 23 Dec 2021 15:24:03 +0800
Subject: [PATCH] cec: add earc condition for arc switch [1/1]

PD#SWPL-65056

Problem:
New demand for arc switch. Earc state is prior
to the arc switch.

Solution:
1.If earc is on, then only change the state
and do nothing.
2.The arc logic swtich should be on if earc is on.

Verify:
tv

Change-Id: Iafde2c101221765be88e5892f2337aebc43d9523
Signed-off-by: an.xi <an.xi@amlogic.com>
---
 .../server/hdmi/HdmiCecLocalDeviceTv.java     | 29 ++++++++++++-------
 .../server/hdmi/HdmiControlService.java       |  4 ---
 .../hdmi/RequestArcTerminationAction.java     |  5 +++-
 3 files changed, 23 insertions(+), 15 deletions(-)

diff --git a/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java b/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java
index 69840b643d0b..0b0995a82838 100644
--- a/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java
+++ b/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java
@@ -242,10 +242,20 @@ final class HdmiCecLocalDeviceTv extends HdmiCecLocalDevice {
 
     public void onEarcSettingChanged(boolean on) {
         HdmiLogger.debug("TV onEarcSettingChanged when arc is " + mArcEstablished);
-        if (on && mArcEstablished) {
-            addAndStartAction(new RequestArcTerminationAction(this, Constants.ADDR_AUDIO_SYSTEM, on));
-        } else if (!on && !mArcEstablished) {
-            startArcAction(true);
+        mEarcOn = on;
+        if (on) {
+            if (mArcEstablished) {
+                // Earc should be turned on after the arc is terminated.
+                addAndStartAction(new RequestArcTerminationAction(this, Constants.ADDR_AUDIO_SYSTEM, on));
+            } else {
+                mService.setEarcMode(true);
+            }
+        } else if (!on) {
+            // Earc should be directly turned off.
+            mService.setEarcMode(false);
+            if (!mArcEstablished) {
+                startArcAction(true);
+            }
         }
     }
 
@@ -991,6 +1001,10 @@ final class HdmiCecLocalDeviceTv extends HdmiCecLocalDevice {
         synchronized (mLock) {
             mSystemAudioControlFeatureEnabled = enabled;
         }
+        if (isEarcOn()) {
+            HdmiLogger.debug("setSystemAudioControlFeatureEnabled abort for earc on");
+            return;
+        }
         if (hasSystemAudioDevice()) {
             changeSystemAudioMode(enabled, null);
         }
@@ -1001,7 +1015,7 @@ final class HdmiCecLocalDeviceTv extends HdmiCecLocalDevice {
 
     boolean isSystemAudioControlFeatureEnabled() {
         synchronized (mLock) {
-            return mSystemAudioControlFeatureEnabled;
+            return isEarcOn() || mSystemAudioControlFeatureEnabled;
         }
     }
 
@@ -1017,11 +1031,6 @@ final class HdmiCecLocalDeviceTv extends HdmiCecLocalDevice {
         HdmiLogger.info("Set Arc Status[old:%b new:%b], and audio mode:%b",
             mArcEstablished, enabled, mService.isSystemAudioActivated());
 
-        if (isEarcOn()) {
-            HdmiLogger.info("No need to setArcStatus for earc on");
-            return false;
-        }
-
         if (mArcEstablished == enabled) {
             return mArcEstablished;
         }
diff --git a/services/core/java/com/android/server/hdmi/HdmiControlService.java b/services/core/java/com/android/server/hdmi/HdmiControlService.java
index 046bbb173970..145640a292b3 100644
--- a/services/core/java/com/android/server/hdmi/HdmiControlService.java
+++ b/services/core/java/com/android/server/hdmi/HdmiControlService.java
@@ -852,10 +852,6 @@ public class HdmiControlService extends SystemService {
     }
 
     public void onEarcSettingChanged(boolean on) {
-        if (!on) {
-            // directly turn off earc.
-            setEarcMode(false);
-        }
         if (tv() != null) {
             tv().onEarcSettingChanged(on);
         } else if (audioSystem() != null) {
diff --git a/services/core/java/com/android/server/hdmi/RequestArcTerminationAction.java b/services/core/java/com/android/server/hdmi/RequestArcTerminationAction.java
index f362a4126892..384235c22f66 100644
--- a/services/core/java/com/android/server/hdmi/RequestArcTerminationAction.java
+++ b/services/core/java/com/android/server/hdmi/RequestArcTerminationAction.java
@@ -87,6 +87,7 @@ final class RequestArcTerminationAction extends RequestArcAction {
                     HdmiLogger.info("Terminate arc and then start earc.");
                     tv().handleTerminateArc(cmd);
                     tv().mService.setEarcMode(true);
+                    finish();
                     return true;
                 }
                 break;
@@ -94,7 +95,6 @@ final class RequestArcTerminationAction extends RequestArcAction {
         return false;
     }
 
-
     @Override
     final void handleTimerEvent(int state) {
         if (mState != state || state != STATE_WATING_FOR_REQUEST_ARC_REQUEST_RESPONSE) {
@@ -102,6 +102,9 @@ final class RequestArcTerminationAction extends RequestArcAction {
         }
         HdmiLogger.error("[T] RequestArcTerminationAction.");
         disableArcTransmission();
+        if (mEarc) {
+            tv().mService.setEarcMode(true);
+        }
         finish();
     }
 }
-- 
2.25.1

