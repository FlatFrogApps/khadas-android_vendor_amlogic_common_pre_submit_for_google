From 35db29961c695964a37ca58fe6782b17f0dfa417 Mon Sep 17 00:00:00 2001
From: Kuibao Zhang <kuibao.zhang@amlogic.com>
Date: Wed, 27 Jan 2021 21:20:30 +0800
Subject: [PATCH] BT: close bt when poweroff [1/1]

Bug:178656414
PD#SWPL-41150

Problem:
    1.the netflix key of bt rcu wakeup host but Netflix app cann't
      open immediately when the system poweroff.

Solution:
    1.close bt when poweroff
    2.libbt can notify Controller to check the broadcast packet of RCU's netflix when bt turning off
    3.Controller will wakeup host through a special waveform after the
    controller receivers Netflix broadcast from bt RCU,and host will
    open Netflix app through this waveform.

Verfy:
    ohm.
Change-Id: I693196e4fc0d74d1eb8aeb20f7c434788c2b35c8
---

diff --git a/services/core/java/com/android/server/power/ShutdownThread.java b/services/core/java/com/android/server/power/ShutdownThread.java
index bc722f1..10696c9 100644
--- a/services/core/java/com/android/server/power/ShutdownThread.java
+++ b/services/core/java/com/android/server/power/ShutdownThread.java
@@ -21,6 +21,8 @@
 import android.app.Dialog;
 import android.app.IActivityManager;
 import android.app.ProgressDialog;
+import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.IBluetoothManager;
 import android.app.admin.SecurityLog;
 import android.content.BroadcastReceiver;
 import android.content.Context;
@@ -63,6 +65,7 @@
     private static final String TAG = "ShutdownThread";
     private static final int ACTION_DONE_POLL_WAIT_MS = 500;
     private static final int RADIOS_STATE_POLL_SLEEP_MS = 100;
+    private static final int BT_SLEEP_TIME = 100;
     // maximum time we wait for the shutdown broadcast before going on.
     private static final int MAX_BROADCAST_TIME = 10*1000;
     private static final int MAX_SHUTDOWN_WAIT_TIME = 20*1000;
@@ -77,6 +80,8 @@
 
     // length of vibration before shutting down
     private static final int SHUTDOWN_VIBRATE_MS = 500;
+    public static final String BT_NAME_QCA = "persist.vendor.bt_vendor";
+    private static boolean qcabt = false;
 
     // state tracking
     private static final Object sIsStartedGuard = new Object();
@@ -116,6 +121,7 @@
     private static String METRIC_RADIOS = "shutdown_radios";
     private static String METRIC_RADIO = "shutdown_radio";
     private static String METRIC_SHUTDOWN_TIME_START = "begin_shutdown";
+    private static String METRIC_BT = "shutdown_bt";
 
     private final Object mActionDoneSync = new Object();
     private boolean mActionDone;
@@ -595,10 +601,33 @@
             public void run() {
                 TimingsTraceLog shutdownTimingsTraceLog = newTimingsLog();
                 boolean radioOff;
+                boolean bluetoothReadyForShutdown = false;
 
+                String module = SystemProperties.get(BT_NAME_QCA, "null");
+                Log.d(TAG, " get module=" + module);
+                if (module.indexOf("qca") != -1)
+                    qcabt = true;
                 TelephonyManager telephonyManager = mContext.getSystemService(
                         TelephonyManager.class);
 
+                final IBluetoothManager bluetooth =
+                    IBluetoothManager.Stub.asInterface(ServiceManager.checkService(
+                        BluetoothAdapter.BLUETOOTH_MANAGER_SERVICE));
+                    if (qcabt) {
+                        try {
+                            bluetoothReadyForShutdown = bluetooth == null ||
+                                bluetooth.getState() == BluetoothAdapter.STATE_OFF;
+                            if (!bluetoothReadyForShutdown) {
+                                Log.w(TAG, "Disabling Bluetooth...");
+                                metricStarted(METRIC_BT);
+                                // disable but don't persist new state
+                                bluetooth.disable(mContext.getPackageName(), false);
+                            }
+                        } catch (RemoteException ex) {
+                            Log.e(TAG, "RemoteException during bluetooth shutdown", ex);
+                            bluetoothReadyForShutdown = true;
+                        }
+                    }
                 radioOff = telephonyManager == null
                         || !telephonyManager.isAnyRadioPoweredOn();
                 if (!radioOff) {
@@ -607,7 +636,7 @@
                     telephonyManager.shutdownAllRadios();
                 }
 
-                Log.i(TAG, "Waiting for Radio...");
+                Log.i(TAG, "Waiting for Bluetooth and Radio...");
 
                 long delay = endTime - SystemClock.elapsedRealtime();
                 while (delay > 0) {
@@ -618,6 +647,27 @@
                         sInstance.setRebootProgress(status, null);
                     }
 
+                    if (qcabt && (!bluetoothReadyForShutdown)) {
+                        try {
+                            // BLE only mode can happen when BT is turned off
+                            // We will continue shutting down in such case
+                            bluetoothReadyForShutdown =
+                            bluetooth.getState() == BluetoothAdapter.STATE_OFF ||
+                            bluetooth.getState() == BluetoothAdapter.STATE_BLE_TURNING_OFF ||
+                            bluetooth.getState() == BluetoothAdapter.STATE_BLE_ON;
+
+                            Log.i(TAG, "bluetoothReadyForShutdown.");
+                        } catch (RemoteException ex) {
+                            Log.e(TAG, "RemoteException during bluetooth shutdown", ex);
+                            bluetoothReadyForShutdown = true;
+                        }
+                        if (bluetoothReadyForShutdown) {
+                            Log.i(TAG, "Bluetooth turned off.");
+                            metricEnded(METRIC_BT);
+                            shutdownTimingsTraceLog
+                                    .logDuration("ShutdownBt", TRON_METRICS.get(METRIC_BT));
+                        }
+                    }
                     if (!radioOff) {
                         radioOff = !telephonyManager.isAnyRadioPoweredOn();
                         if (radioOff) {
@@ -628,7 +678,15 @@
                         }
                     }
 
-                    if (radioOff) {
+                    if (radioOff && qcabt && bluetoothReadyForShutdown) {
+                        Log.i(TAG, "Radio and Bluetooth shutdown complete.");
+                        do {
+                            SystemClock.sleep(BT_SLEEP_TIME);
+                        } while (!(bluetooth == null));
+                        done[0] = true;
+                        break;
+                    }
+                    else if (radioOff && !qcabt) {
                         Log.i(TAG, "Radio shutdown complete.");
                         done[0] = true;
                         break;
@@ -645,7 +703,7 @@
         } catch (InterruptedException ex) {
         }
         if (!done[0]) {
-            Log.w(TAG, "Timed out waiting for Radio shutdown.");
+            Log.w(TAG, "Timed out waiting for Radio and Bluetooth shutdown.");
         }
     }
 
