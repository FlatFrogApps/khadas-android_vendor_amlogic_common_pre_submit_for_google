From b53da898b461f6af54ec903ddc2fcf8342154839 Mon Sep 17 00:00:00 2001
From: "shilong.yang" <shilong.yang@amlogic.com>
Date: Fri, 13 Nov 2020 14:33:15 +0800
Subject: [PATCH] frameworks: add codec ext and load amnuplayer for R. [1/1]

PD#SWPL-29827

Problem:
need codec ext and load amnuplayer for R.

Solution:
add codecs ext and load amnuplayer from mediaserver.

Verify:
ohm

Change-Id: Ibdf5739bcc85e3df8e69c4b8cf903dfac454cd78
Signed-off-by: shilong.yang <shilong.yang@amlogic.com>
---
 media/extractors/tests/Android.bp             |   2 +
 .../MetadataRetrieverClient.cpp               |  35 +++++
 media/libstagefright/ACodec.cpp               |  27 +++-
 media/libstagefright/Android.bp               |   3 +
 media/libstagefright/Utils.cpp                |   9 ++
 media/libstagefright/rtsp/Android.bp          |   1 +
 .../tests/extractorFactory/Android.bp         |   3 +
 media/libstagefright/tests/writer/Android.bp  |   3 +
 media/libstagefright/webm/tests/Android.bp    |   3 +
 media/libstagefright/xmlparser/Android.bp     |  23 +++
 .../xmlparser/MediaCodecsXmlParser.cpp        | 132 +++++++++++++++++-
 media/libstagefright/xmlparser/XmlParser.go   |  41 ++++++
 media/mediaserver/Android.bp                  |   2 +-
 13 files changed, 277 insertions(+), 7 deletions(-)
 create mode 100755 media/libstagefright/xmlparser/XmlParser.go

diff --git a/media/extractors/tests/Android.bp b/media/extractors/tests/Android.bp
index b3afe2f3ca..69e8bddc6b 100644
--- a/media/extractors/tests/Android.bp
+++ b/media/extractors/tests/Android.bp
@@ -49,6 +49,7 @@ cc_test {
         "libvorbisidec",
         "libwebm",
         "libFLAC",
+        "//vendor/amlogic/common:libmediavendor_default",
     ],
 
     shared_libs: [
@@ -67,6 +68,7 @@ cc_test {
         "libhidlmemory",
         "libhidlbase",
         "libbase",
+        "libstagefright_omx",
     ],
 
     include_dirs: [
diff --git a/media/libmediaplayerservice/MetadataRetrieverClient.cpp b/media/libmediaplayerservice/MetadataRetrieverClient.cpp
index fb228ca297..5552bf6552 100644
--- a/media/libmediaplayerservice/MetadataRetrieverClient.cpp
+++ b/media/libmediaplayerservice/MetadataRetrieverClient.cpp
@@ -42,6 +42,7 @@
 #include "MetadataRetrieverClient.h"
 #include "StagefrightMetadataRetriever.h"
 #include "MediaPlayerFactory.h"
+#include <dlfcn.h>
 
 namespace android {
 
@@ -81,9 +82,43 @@ void MetadataRetrieverClient::disconnect()
     IPCThreadState::self()->flushCommands();
 }
 
+static sp<MediaMetadataRetrieverBase> getExtendMetadataRetriever()
+{
+     void *libHandle = dlopen("libmetadataretriever_ext.so", RTLD_NOW|RTLD_NODELETE);
+
+    if (libHandle == NULL) {
+        ALOGE("unable to dlopen metadata_retriever extension: %s", dlerror());
+        return NULL;
+    }
+
+    typedef MediaMetadataRetrieverBase *(*GetExtendMetadataRetrieverFunc)();
+
+    GetExtendMetadataRetrieverFunc getExtendMetadataRetriever =
+        (GetExtendMetadataRetrieverFunc)dlsym(
+                libHandle,
+                "_Z26getExtendMetadataRetrieverv");
+
+    if (getExtendMetadataRetriever == NULL) {
+        dlclose(libHandle);
+        libHandle = NULL;
+
+        return NULL;
+    }
+
+    return getExtendMetadataRetriever();
+}
+
+
 static sp<MediaMetadataRetrieverBase> createRetriever(player_type playerType)
 {
     sp<MediaMetadataRetrieverBase> p;
+        if (playerType == 112) {
+        p = getExtendMetadataRetriever();
+        if (p == NULL) {
+            p = new StagefrightMetadataRetriever;
+        }
+        return p;
+    }
     switch (playerType) {
         case STAGEFRIGHT_PLAYER:
         case NU_PLAYER:
diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index ebc98ae760..beb63fae72 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -63,6 +63,8 @@
 #include "include/SecureBuffer.h"
 #include "include/SharedMemoryBuffer.h"
 #include <media/stagefright/omx/OMXUtils.h>
+#include <MediaVendorExt.h>
+
 
 namespace android {
 
@@ -575,7 +577,7 @@ ACodec::ACodec()
       mDescribeHDR10PlusInfoIndex((OMX_INDEXTYPE)0),
       mStateGeneration(0),
       mVendorExtensionsStatus(kExtensionsUnchecked) {
-    memset(&mLastHDRStaticInfo, 0, sizeof(mLastHDRStaticInfo));
+      memset(&mLastHDRStaticInfo, 0, sizeof(mLastHDRStaticInfo));
 
     mUninitializedState = new UninitializedState(this);
     mLoadedState = new LoadedState(this);
@@ -1691,7 +1693,7 @@ status_t ACodec::fillBuffer(BufferInfo *info) {
 
 status_t ACodec::setComponentRole(
         bool isEncoder, const char *mime) {
-    const char *role = GetComponentRole(isEncoder, mime);
+    const char *role = MediaVendorExt::imp()->getComponentRole(isEncoder, mime);
     if (role == NULL) {
         return BAD_VALUE;
     }
@@ -2067,7 +2069,7 @@ status_t ACodec::configureCodec(
                 requiresSwRenderer = true;
             }
 
-            if (mComponentName.startsWith("OMX.google.") || requiresSwRenderer) {
+            if ((mComponentName.startsWith("OMX.google.") ||  MediaVendorExt::imp()->isVendorSoftDecoder(mComponentName.c_str())) || requiresSwRenderer) {
                 usingSwRenderer = true;
                 haveNativeWindow = false;
                 (void)setPortMode(kPortIndexOutput, IOMX::kPortModePresetByteBuffer);
@@ -2304,6 +2306,11 @@ status_t ACodec::configureCodec(
             err = setupAC4Codec(encoder, numChannels, sampleRate);
         }
     }
+    if ( MediaVendorExt::imp()->isAudioExtendFormat(mime))
+        err = MediaVendorExt::imp()->setAudioExtendParameter(mime ,mOMXNode, msg);
+
+    if ( MediaVendorExt::imp()->isExtendFormat(mime))
+        err = MediaVendorExt::imp()->handleExtendParameter(mime ,mOMXNode, msg);
 
     if (err != OK) {
         return err;
@@ -3453,9 +3460,12 @@ status_t ACodec::setupVideoDecoder(
     status_t err = GetVideoCodingTypeFromMime(mime, &compressionFormat);
 
     if (err != OK) {
-        return err;
+        err = MediaVendorExt::imp()->getVideoCodingTypeFromMimeEx(mime, &compressionFormat);
     }
 
+    if (err != OK) {
+        return err;
+    }
     if (compressionFormat == OMX_VIDEO_CodingHEVC) {
         int32_t profile;
         if (msg->findInt32("profile", &profile)) {
@@ -5504,6 +5514,13 @@ status_t ACodec::getPortFormat(OMX_U32 portIndex, sp<AMessage> &notify) {
                 }
 
                 default:
+                    if ( MediaVendorExt::imp()->isAudioExtendCoding((int)audioDef->eEncoding)) {
+                        err =  MediaVendorExt::imp()->getAudioExtendParameter((int)audioDef->eEncoding,
+                        portIndex ,mOMXNode, notify);
+                        if (err != OK)
+                        return err;
+                        break;
+                    }
                     ALOGE("Unsupported audio coding: %s(%d)\n",
                             asString(audioDef->eEncoding), audioDef->eEncoding);
                     return BAD_TYPE;
@@ -8718,7 +8735,7 @@ void ACodec::FlushingState::changeStateIfWeOwnAllBuffers() {
 status_t ACodec::queryCapabilities(
         const char* owner, const char* name, const char* mime, bool isEncoder,
         MediaCodecInfo::CapabilitiesWriter* caps) {
-    const char *role = GetComponentRole(isEncoder, mime);
+    const char *role = MediaVendorExt::imp()->getComponentRole(isEncoder, mime);
     if (role == NULL) {
         return BAD_VALUE;
     }
diff --git a/media/libstagefright/Android.bp b/media/libstagefright/Android.bp
index 3bccb7be7a..567cbb20f3 100644
--- a/media/libstagefright/Android.bp
+++ b/media/libstagefright/Android.bp
@@ -141,6 +141,7 @@ cc_library_static {
         "-Werror",
         "-Wno-error=deprecated-declarations",
         "-Wall",
+        "-DMPEG2EXTRACTOR",
     ],
 
     sanitize: {
@@ -285,6 +286,7 @@ cc_library {
         "android.hardware.cas.native@1.0",
         "android.hardware.drm@1.0",
         "android.hardware.media.omx@1.0",
+
     ],
 
     static_libs: [
@@ -297,6 +299,7 @@ cc_library {
         "libogg",
         "libwebm",
         "libstagefright_id3",
+        "//vendor/amlogic/common:libmediavendor_default"
     ],
 
     header_libs:[
diff --git a/media/libstagefright/Utils.cpp b/media/libstagefright/Utils.cpp
index a1e4d438ec..0ae6f94c3d 100644
--- a/media/libstagefright/Utils.cpp
+++ b/media/libstagefright/Utils.cpp
@@ -46,6 +46,9 @@
 #include <media/stagefright/Utils.h>
 #include <media/AudioParameter.h>
 #include <system/audio.h>
+#if (!defined STAGEFRIGHT_PLAYER2) && (!defined MPEG2EXTRACTOR)
+#include <MediaVendorExt.h>
+#endif
 
 namespace android {
 
@@ -1473,6 +1476,9 @@ status_t convertMetaDataToMessage(
         ALOGV("DV: calling parseDolbyVisionProfileLevelFromDvcc with data size %zu", size);
         parseDolbyVisionProfileLevelFromDvcc(ptr, size, msg);
     }
+#if (!defined STAGEFRIGHT_PLAYER2) && (!defined MPEG2EXTRACTOR)
+    MediaVendorExt::imp()->convertMetaDataToMessage(new MetaData(*meta), msg);
+#endif
 
     *format = msg;
 
@@ -1986,6 +1992,9 @@ void convertMessageToMetaData(const sp<AMessage> &msg, sp<MetaData> &meta) {
         }
     }
     // XXX TODO add whatever other keys there are
+#if (!defined STAGEFRIGHT_PLAYER2) && (!defined MPEG2EXTRACTOR)
+    MediaVendorExt::imp()->convertMessageToMetaData(msg, meta);
+#endif
 
 #if 0
     ALOGI("converted %s to:", msg->debugString(0).c_str());
diff --git a/media/libstagefright/rtsp/Android.bp b/media/libstagefright/rtsp/Android.bp
index a5a895e472..3e078645ed 100644
--- a/media/libstagefright/rtsp/Android.bp
+++ b/media/libstagefright/rtsp/Android.bp
@@ -28,6 +28,7 @@ cc_defaults {
     include_dirs: [
         "frameworks/av/media/libstagefright",
         "frameworks/native/include/media/openmax",
+        "frameworks/av/media/libdatasource/include"
     ],
 
     arch: {
diff --git a/media/libstagefright/tests/extractorFactory/Android.bp b/media/libstagefright/tests/extractorFactory/Android.bp
index e3e61d7753..0686b93975 100644
--- a/media/libstagefright/tests/extractorFactory/Android.bp
+++ b/media/libstagefright/tests/extractorFactory/Android.bp
@@ -32,11 +32,14 @@ cc_test {
         "libdl_android",
         "libdatasource",
         "libmediametrics",
+        "libstagefright_omx",
+
     ],
 
     static_libs: [
         "libstagefright",
         "libstagefright_foundation",
+        "//vendor/amlogic/common:libmediavendor_default",
     ],
 
     include_dirs: [
diff --git a/media/libstagefright/tests/writer/Android.bp b/media/libstagefright/tests/writer/Android.bp
index 7e169cbffa..be23b17887 100644
--- a/media/libstagefright/tests/writer/Android.bp
+++ b/media/libstagefright/tests/writer/Android.bp
@@ -28,6 +28,8 @@ cc_test {
         "libcutils",
         "liblog",
         "libutils",
+        "libstagefright_omx",
+
     ],
 
     static_libs: [
@@ -37,6 +39,7 @@ cc_test {
         "libstagefright_foundation",
         "libstagefright_esds",
         "libogg",
+        "//vendor/amlogic/common:libmediavendor_default",
     ],
 
     include_dirs: [
diff --git a/media/libstagefright/webm/tests/Android.bp b/media/libstagefright/webm/tests/Android.bp
index 5183a49495..8cd9090315 100644
--- a/media/libstagefright/webm/tests/Android.bp
+++ b/media/libstagefright/webm/tests/Android.bp
@@ -31,12 +31,15 @@ cc_test {
         "libstagefright",
         "libstagefright_webm",
         "libstagefright_foundation",
+        "//vendor/amlogic/common:libmediavendor_default",
     ],
 
     shared_libs: [
         "libbinder",
         "liblog",
         "libutils",
+        "libstagefright_omx",
+
     ],
 
     cflags: [
diff --git a/media/libstagefright/xmlparser/Android.bp b/media/libstagefright/xmlparser/Android.bp
index 7ed0e88d15..46b7785383 100644
--- a/media/libstagefright/xmlparser/Android.bp
+++ b/media/libstagefright/xmlparser/Android.bp
@@ -1,3 +1,25 @@
+bootstrap_go_package {
+    name: "xmlparser",
+    pkgPath: "android/soong/xmlparser",
+    deps: [
+        "blueprint",
+        "blueprint-pathtools",
+        "soong",
+        "soong-android",
+        "soong-cc",
+        "soong-genrule",
+    ],
+    srcs: [
+        "XmlParser.go",
+    ],
+    pluginFor: ["soong_build"],
+}
+
+xmlparser_defaults {
+    name: "xmlparser_defaults",
+}
+
+
 cc_library_headers {
     name: "libstagefright_xmlparser_headers",
     export_include_dirs: ["include"],
@@ -6,6 +28,7 @@ cc_library_headers {
 
 cc_library_shared {
     name: "libstagefright_xmlparser",
+    defaults: ["xmlparser_defaults"],
     vendor_available: true,
     vndk: {
         enabled: true,
diff --git a/media/libstagefright/xmlparser/MediaCodecsXmlParser.cpp b/media/libstagefright/xmlparser/MediaCodecsXmlParser.cpp
index a232150402..1341db74a9 100644
--- a/media/libstagefright/xmlparser/MediaCodecsXmlParser.cpp
+++ b/media/libstagefright/xmlparser/MediaCodecsXmlParser.cpp
@@ -138,15 +138,18 @@ MediaCodecsXmlParser::StringSet parseCommaSeparatedStringSet(const char *s) {
 std::vector<std::string> MediaCodecsXmlParser::getDefaultXmlNames() {
     static constexpr char const* prefixes[] = {
             "media_codecs",
+            "media_codecs_ext",
             "media_codecs_performance"
         };
     static std::vector<std::string> variants = {
             android::base::GetProperty("ro.media.xml_variant.codecs", ""),
+            android::base::GetProperty("ro.media.xml_variant.codecs_ext", ""),
             android::base::GetProperty("ro.media.xml_variant.codecs_performance", "")
         };
     static std::vector<std::string> names = {
             prefixes[0] + variants[0] + ".xml",
-            prefixes[1] + variants[1] + ".xml"
+            prefixes[1] + variants[1] + ".xml",
+            prefixes[2] + variants[2] + ".xml",
         };
     return names;
 }
@@ -425,6 +428,8 @@ status_t MediaCodecsXmlParser::Impl::parseXmlFilesInSearchDirs(
     for (const std::string fileName : fileNames) {
         status_t err = NO_INIT;
         std::string path;
+        std::string xmlstr = "/vendor/etc/media_codecs_ext.xml";
+        parseXmlPath(xmlstr);
         if (findFileInDirs(searchDirs, fileName, &path)) {
             err = parseXmlPath(path);
         } else {
@@ -1457,6 +1462,127 @@ status_t MediaCodecsXmlParser::getParsingStatus() const {
     return mImpl->getParsingStatus();
 }
 
+const char *MEDIA_MIMETYPE_VIDEO_MJPEG = "video/x-motion-jpeg";
+const char *MEDIA_MIMETYPE_VIDEO_MSMPEG4 = "video/x-msmpeg";
+const char *MEDIA_MIMETYPE_VIDEO_SORENSON_SPARK = "video/x-sorenson-spark";
+const char *MEDIA_MIMETYPE_VIDEO_WMV = "video/x-ms-wmv";
+const char *MEDIA_MIMETYPE_VIDEO_VC1 = "video/vc1";
+const char *MEDIA_MIMETYPE_VIDEO_WVC1 = "video/wvc1";
+const char *MEDIA_MIMETYPE_VIDEO_VPX = "video/x-vnd.on2.vp8";
+const char *MEDIA_MIMETYPE_VIDEO_RM10 = "video/rm10";
+const char *MEDIA_MIMETYPE_VIDEO_RM20 = "video/rm20";
+const char *MEDIA_MIMETYPE_VIDEO_RM30 = "video/rm30";
+const char *MEDIA_MIMETYPE_VIDEO_RM40 = "video/rm40";
+const char *MEDIA_MIMETYPE_VIDEO_VP6 = "video/x-vnd.on2.vp6";
+const char *MEDIA_MIMETYPE_VIDEO_VP6F = "video/x-vnd.on2.vp6f";
+const char *MEDIA_MIMETYPE_VIDEO_VP6A = "video/x-vnd.on2.vp6a";
+const char *MEDIA_MIMETYPE_VIDEO_WMV1 = "video/wmv1";
+const char *MEDIA_MIMETYPE_VIDEO_WMV2 = "video/wmv2";
+const char *MEDIA_MIMETYPE_VIDEO_WMV3 = "video/wmv3";
+const char *MEDIA_MIMETYPE_VIDEO_MSWMV3 = "video/x-ms-wmv";
+const char *MEDIA_MIMETYPE_VIDEO_AVS = "video/avs";
+const char *MEDIA_MIMETYPE_VIDEO_AVS2 = "video/avs2";
+const char *MEDIA_MIMETYPE_AUDIO_DTS = "audio/dtshd";
+const char *MEDIA_MIMETYPE_AUDIO_MP1 = "audio/mp1";
+const char *MEDIA_MIMETYPE_AUDIO_MP2 = "audio/mp2";
+const char *MEDIA_MIMETYPE_AUDIO_ADPCM_IMA = "audio/adpcm-ima";
+const char *MEDIA_MIMETYPE_AUDIO_ADPCM_MS = "audio/adpcm-ms";
+const char *MEDIA_MIMETYPE_AUDIO_ALAC = "audio/alac";
+const char *MEDIA_MIMETYPE_AUDIO_AAC_ADIF = "audio/aac-adif";
+const char *MEDIA_MIMETYPE_AUDIO_AAC_LATM = "audio/aac-latm";
+const char *MEDIA_MIMETYPE_AUDIO_ADTS_PROFILE = "audio/adts";
+const char *MEDIA_MIMETYPE_AUDIO_WMA = "audio/wma";
+const char *MEDIA_MIMETYPE_AUDIO_WMAPRO = "audio/wmapro";
+const char *MEDIA_MIMETYPE_AUDIO_DTSHD  = "audio/dtshd";
+const char *MEDIA_MIMETYPE_AUDIO_TRUEHD = "audio/truehd";
+const char *MEDIA_MIMETYPE_AUDIO_AC3 = "audio/ac3";
+const char *MEDIA_MIMETYPE_AUDIO_EC3 = "audio/eac3";
+const char *MEDIA_MIMETYPE_AUDIO_FFMPEG = "audio/ffmpeg";
+
+const char*  AGetComponentRole(bool isEncoder, const char *mime) {
+    const char *role = GetComponentRole(isEncoder, mime);
+    if (role != NULL) {
+        return role;
+    }
+
+    struct MimeToRole {
+        const char *mime;
+        const char *decoderRole;
+        const char *encoderRole;
+    };
+
+    static const MimeToRole kMimeToRole[] = {
+         {MEDIA_MIMETYPE_AUDIO_DTSHD,
+         "audio_decoder.dtshd",  "audio_encoder.dtshd" },
+         { MEDIA_MIMETYPE_AUDIO_AAC_ADIF,
+         "audio_decoder.adif", "audio_encoder.adif" },
+         { MEDIA_MIMETYPE_AUDIO_AAC_LATM,
+         "audio_decoder.latm", "audio_encoder.latm" },
+         { MEDIA_MIMETYPE_AUDIO_ADTS_PROFILE,
+         "audio_decoder.adts", "audio_encoder.adts" },
+         { MEDIA_MIMETYPE_VIDEO_MJPEG,
+         "video_decoder.mjpeg", "video_encoder.mjpeg" },
+         { MEDIA_MIMETYPE_VIDEO_WMV3,
+         "video_decoder.wmv", "video_encoder.wmv" },
+         { MEDIA_MIMETYPE_VIDEO_MSWMV3,
+         "video_decoder.wmv3", "video_encoder.wmv3" },
+         { MEDIA_MIMETYPE_AUDIO_WMA,
+         "audio_decoder.wma", "audio_encoder.wma" },
+         { MEDIA_MIMETYPE_AUDIO_WMAPRO,
+         "audio_decoder.wmapro", "audio_encoder.wmapro" },
+         { MEDIA_MIMETYPE_AUDIO_TRUEHD,
+         "audio_decoder.truehd", "audio_encoder.truehd" },
+         { MEDIA_MIMETYPE_VIDEO_VC1,
+         "video_decoder.vc1", "video_encoder.vc1" },
+         { MEDIA_MIMETYPE_VIDEO_WVC1,
+         "video_decoder.wvc1", "video_encoder.wvc1" },
+         { MEDIA_MIMETYPE_VIDEO_VP6,
+         "video_decoder.amvp6", "video_encoder.amvp6" },
+         { MEDIA_MIMETYPE_VIDEO_VP6A,
+         "video_decoder.amvp6a", "video_encoder.amvp6a" },
+         { MEDIA_MIMETYPE_VIDEO_VP6F,
+         "video_decoder.amvp6f", "video_encoder.amvp6f" },
+         { MEDIA_MIMETYPE_VIDEO_RM10,
+         "video_decoder.rm10", "video_encoder.rm10"},
+         { MEDIA_MIMETYPE_VIDEO_RM20,
+         "video_decoder.rm20", "video_encoder.rm20"},
+         { MEDIA_MIMETYPE_VIDEO_RM30,
+         "video_decoder.rm30", "video_encoder.rm30"},
+         { MEDIA_MIMETYPE_VIDEO_RM40,
+         "video_decoder.rm40", "video_encoder.rm40"},
+         { MEDIA_MIMETYPE_VIDEO_WMV2,
+         "video_decoder.wmv2", "video_encoder.wmv2"},
+         { MEDIA_MIMETYPE_VIDEO_WMV1,
+         "video_decoder.wmv1", "video_encoder.wmv1"},
+         { MEDIA_MIMETYPE_AUDIO_FFMPEG,
+         "audio_decoder.ffmpeg", "audio_encoder.ffmpeg" },
+         { MEDIA_MIMETYPE_AUDIO_ADTS_PROFILE,
+         "audio_decoder.adts", "audio_encoder.adts" },
+         { MEDIA_MIMETYPE_VIDEO_AVS,
+         "video_decoder.avs", "video_encoder.avs"},
+         { MEDIA_MIMETYPE_VIDEO_AVS2,
+         "video_decoder.avs2", "video_encoder.avs2"},
+    };
+
+    static const size_t kNumMimeToRole =
+        sizeof(kMimeToRole) / sizeof(kMimeToRole[0]);
+
+    size_t i;
+    for (i = 0; i < kNumMimeToRole; ++i) {
+        if (!strcasecmp(mime, kMimeToRole[i].mime)) {
+            ALOGI("AmAVUtils::getComponentRole break\n");
+            break;
+        }
+    }
+    if (i == kNumMimeToRole) {
+        ALOGE("AmAVUtils::have no Component role isEncoder :%d mime:%s",isEncoder,mime);
+        return NULL;
+    }
+    return isEncoder ? kMimeToRole[i].encoderRole
+            : kMimeToRole[i].decoderRole;
+
+}
+
 void MediaCodecsXmlParser::Impl::generateRoleMap() const {
     for (const auto& codec : mData.mCodecMap) {
         const auto &codecName = codec.first;
@@ -1469,7 +1595,11 @@ void MediaCodecsXmlParser::Impl::generateRoleMap() const {
         const auto& typeMap = codec.second.typeMap;
         for (const auto& type : typeMap) {
             const auto& typeName = type.first;
+        #ifdef TARGETSWCODEC_EXT
+            const char* roleName = AGetComponentRole(isEncoder, typeName.data());
+        #else
             const char* roleName = GetComponentRole(isEncoder, typeName.data());
+        #endif
             if (roleName == nullptr) {
                 ALOGE("Cannot find the role for %s of type %s",
                         isEncoder ? "an encoder" : "a decoder",
diff --git a/media/libstagefright/xmlparser/XmlParser.go b/media/libstagefright/xmlparser/XmlParser.go
new file mode 100755
index 0000000000..26487b7798
--- /dev/null
+++ b/media/libstagefright/xmlparser/XmlParser.go
@@ -0,0 +1,41 @@
+package xmlparser
+
+import (
+    "android/soong/android"
+    "android/soong/cc"
+    "fmt"
+)
+
+func xmlparserDefaults (ctx android.LoadHookContext) {
+    sdkVersion := ctx.AConfig().PlatformSdkVersionInt()
+    fmt.Println("sdkVersion:", sdkVersion)
+    if sdkVersion >= 30{
+        type props struct {
+        Cflags []string
+        }
+        p := &props{}
+        p.Cflags = globalDefaults(ctx)
+        ctx.AppendProperties(p)
+    }
+}
+
+func globalDefaults(ctx android.BaseContext) ([]string) {
+    var cppflags []string
+    vconfig := ctx.Config().VendorConfig("amlogic_vendorconfig")
+    if vconfig.Bool("enable_swcodec") == true {
+        fmt.Println("stagefright: enable_swcodec is true")
+        cppflags = append(cppflags,"-DTARGETSWCODEC_EXT")
+    }
+    return cppflags
+}
+
+func init () {
+    android.RegisterModuleType("xmlparser_defaults", xmlparserDefaultsFactory)
+}
+
+func xmlparserDefaultsFactory () android.Module {
+    module := cc.DefaultsFactory()
+    android.AddLoadHook(module, xmlparserDefaults)
+    return module
+}
+
diff --git a/media/mediaserver/Android.bp b/media/mediaserver/Android.bp
index afca7c4f71..5d2aafb65b 100644
--- a/media/mediaserver/Android.bp
+++ b/media/mediaserver/Android.bp
@@ -26,7 +26,7 @@ cc_binary {
     ],
 
     static_libs: [
-        "libregistermsext",
+        "//vendor/amlogic/common:libregistermsext_aml"
     ],
 
     include_dirs: [
-- 
2.28.0

