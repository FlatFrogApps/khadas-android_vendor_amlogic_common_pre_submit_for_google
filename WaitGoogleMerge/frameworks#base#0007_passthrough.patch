From 1fe3dda079203da32e5edffd1a83e0e88867cc38 Mon Sep 17 00:00:00 2001
From: "an.xi" <an.xi@amlogic.com>
Date: Mon, 12 Jul 2021 19:13:30 +0800
Subject: [PATCH] cec: reset DEVICE_OUT_HDMI volume to maximum if cec is on
 [1/1]

PD#SWPL-54887

Problem:
Scale the condition of reset volume down as customer demands.

Solution:
reset DEVICE_OUT_HDMI volume to maximum if cec is on.

Verify:
ohm

Change-Id: I7909a66f31a4f7e25de960d50339cd9d344d3690
Signed-off-by: an.xi <an.xi@amlogic.com>
---
 .../android/server/audio/AudioService.java    | 27 ++++++++++---------
 1 file changed, 14 insertions(+), 13 deletions(-)

diff --git a/services/core/java/com/android/server/audio/AudioService.java b/services/core/java/com/android/server/audio/AudioService.java
index 237e2ec8c9ad..500de689030e 100644
--- a/services/core/java/com/android/server/audio/AudioService.java
+++ b/services/core/java/com/android/server/audio/AudioService.java
@@ -834,6 +834,8 @@ public class AudioService extends IAudioService.Stub
         // Volume passhrough feature could be enabled for all projects.
         mVolumePassthroughEnabled = SystemProperties.getBoolean(PROP_VOLUME_PASSTHROUGH, true);
         mSupportDolbyMS12 = new File(PATH_LIB_DOLBY_SM12).exists();
+        mHdmiCecEnabled = Settings.Global.getInt(mContentResolver,
+                                            Settings.Global.HDMI_CEC_SWITCH_ENABLED, 1) == 1;
 
         // must be called before readPersistedSettings() which needs a valid mStreamVolumeAlias[]
         // array initialized by updateStreamVolumeAlias()
@@ -6087,15 +6089,11 @@ public class AudioService extends IAudioService.Stub
 
         public void checkFixedVolumeDevicesForCec() {
             synchronized (VolumeStreamState.class) {
-                if (DEBUG_VOL) {
-                    Slog.d(TAG, "checkFixedVolumeDevicesForCec");
-                }
                 // ignore settings for fixed volume devices: volume should always be at max or 0
                 if (mStreamVolumeAlias[mStreamType] == AudioSystem.STREAM_MUSIC) {
                     for (int i = 0; i < mIndexMap.size(); i++) {
                         int device = mIndexMap.keyAt(i);
-                        int index = mIndexMap.valueAt(i);
-                        if ((isFixedVolumeDevice(device) && index != 0)) {
+                        if ((device & AudioSystem.DEVICE_OUT_HDMI) != 0) {
                             mIndexMap.put(device, mIndexMax);
                         }
                         applyDeviceVolume_syncVSS(device);
@@ -7307,13 +7305,16 @@ public class AudioService extends IAudioService.Stub
                 updateHdmiCecSinkLocked(isCecEnabled ? isCecAvailable : false);
                 if (isCecEnabled != mHdmiCecEnabled) {
                     mHdmiCecEnabled = isCecEnabled;
-                    // reset the volume to max when cec switch changes.
-                    checkAllFixedVolumeDevicesForCec(AudioSystem.STREAM_MUSIC);
-                    if (isCecEnabled && !isCecAvailable) {
-                        // try again if tv is not available to avoid compat issues.
-                        synchronized (mHdmiClientLock) {
-                            if (mHdmiPlaybackClient != null) {
-                                mHdmiPlaybackClient.queryDisplayStatus(mHdmiDisplayStatusCallback);
+                    if (isCecEnabled) {
+                        Slog.d(TAG, "reset hdmi device's volume max");
+                        // reset the volume to max when cec switch changes.
+                        checkAllFixedVolumeDevicesForCec(AudioSystem.STREAM_MUSIC);
+                        if (!isCecAvailable) {
+                            // try again if tv is not available to avoid compat issues.
+                            synchronized (mHdmiClientLock) {
+                                if (mHdmiPlaybackClient != null) {
+                                    mHdmiPlaybackClient.queryDisplayStatus(mHdmiDisplayStatusCallback);
+                                }
                             }
                         }
                     }
@@ -7373,7 +7374,7 @@ public class AudioService extends IAudioService.Stub
     private boolean mInVolumePassthrough;
     private boolean mShowingPassthroughHint;
 
-    private boolean mHdmiCecEnabled = true;
+    private boolean mHdmiCecEnabled;
 
     private final Handler mHandler = new Handler();
 
-- 
2.26.1

