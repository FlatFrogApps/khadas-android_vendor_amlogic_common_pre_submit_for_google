From 34018eba80f1725ca84d7b696dbc56f0d94a9ee4 Mon Sep 17 00:00:00 2001
From: "an.xi" <an.xi@amlogic.com>
Date: Thu, 22 Jul 2021 21:15:08 +0800
Subject: [PATCH] cec: add volume control for long press and optimization [1/1]

PD#SWPL-56019

Problem:
The logic for long press in VolumeControlAction is unavailable.

Solution:
1.recover the long press control logic.
2.add humanity hint when tv tries to sync with audio system's volume.
3.tv will try to sync with audio system's volume when tv's volume
is at max or mute, and when the volume control action is finished.

Verify:
t3 on p and r.

Change-Id: I95d17ba07131f07e82850d159fdcf6604d18e327
Signed-off-by: an.xi <an.xi@amlogic.com>
---
 core/res/res/values/strings.xml               |  2 +
 core/res/res/values/symbols.xml               |  1 +
 .../server/hdmi/HdmiCecLocalDeviceTv.java     |  4 +-
 .../server/hdmi/SystemAudioActionFromAvr.java |  1 +
 .../server/hdmi/VolumeControlAction.java      | 50 ++++++++++++++++---
 5 files changed, 48 insertions(+), 10 deletions(-)
 mode change 100755 => 100644 services/core/java/com/android/server/hdmi/VolumeControlAction.java

diff --git a/core/res/res/values/strings.xml b/core/res/res/values/strings.xml
index bf172ddd1550..a97db7bc1e87 100644
--- a/core/res/res/values/strings.xml
+++ b/core/res/res/values/strings.xml
@@ -5301,6 +5301,8 @@
     <!-- Notification action for editing a screenshot (drawing on it, cropping it, etc) -->
     <string name="screenshot_edit">Edit</string>
 
+    <string name="sync_audio_system_volume">"Synchronizing volume from the audio system device"</string>
+
     <string name="volume_dialog_ringer_guidance_vibrate">Calls and notifications will vibrate</string>
     <string name="volume_dialog_ringer_guidance_silent">Calls and notifications will be muted</string>
 
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index d95af449efc4..612ef58c5741 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -1031,6 +1031,7 @@
   <java-symbol type="string" name="user_switching_message" />
   <java-symbol type="string" name="user_logging_out_message" />
   <java-symbol type="string" name="volume_alarm" />
+  <java-symbol type="string" name="sync_audio_system_volume" />
   <java-symbol type="string" name="volume_icon_description_bluetooth" />
   <java-symbol type="string" name="volume_icon_description_incall" />
   <java-symbol type="string" name="volume_icon_description_media" />
diff --git a/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java b/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java
index d47f95113ad2..9854d64815ea 100644
--- a/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java
+++ b/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java
@@ -888,8 +888,8 @@ final class HdmiCecLocalDeviceTv extends HdmiCecLocalDevice {
         HdmiDeviceInfo avr = getAvrDeviceInfo();
         if (!isConnectedToArcDevice(avr)) {
             HdmiLogger.info("audio system device is not ready.");
-
-            return;
+            //resetAudioStatus();
+            //return;
         }
         HdmiLogger.info("System Audio Mode change[old:%b new:%b]",
                 mService.isSystemAudioActivated(), on);
diff --git a/services/core/java/com/android/server/hdmi/SystemAudioActionFromAvr.java b/services/core/java/com/android/server/hdmi/SystemAudioActionFromAvr.java
index 6ddff91a70f7..2b4ca8204e24 100644
--- a/services/core/java/com/android/server/hdmi/SystemAudioActionFromAvr.java
+++ b/services/core/java/com/android/server/hdmi/SystemAudioActionFromAvr.java
@@ -48,6 +48,7 @@ final class SystemAudioActionFromAvr extends SystemAudioAction {
     }
 
     private void handleSystemAudioActionFromAvr() {
+        sendCommand(HdmiCecMessageBuilder.buildGiveAudioStatus(getSourceAddress(), mAvrLogicalAddress));
         if (mTargetAudioStatus == tv().isSystemAudioActivated()) {
             finishWithCallback(HdmiControlManager.RESULT_SUCCESS);
             return;
diff --git a/services/core/java/com/android/server/hdmi/VolumeControlAction.java b/services/core/java/com/android/server/hdmi/VolumeControlAction.java
old mode 100755
new mode 100644
index c34918814cdf..2cc5e6f26bae
--- a/services/core/java/com/android/server/hdmi/VolumeControlAction.java
+++ b/services/core/java/com/android/server/hdmi/VolumeControlAction.java
@@ -19,9 +19,13 @@ package com.android.server.hdmi;
 import static com.android.server.hdmi.Constants.MESSAGE_FEATURE_ABORT;
 import static com.android.server.hdmi.Constants.MESSAGE_REPORT_AUDIO_STATUS;
 import static com.android.server.hdmi.Constants.MESSAGE_USER_CONTROL_PRESSED;
+import static com.android.server.hdmi.HdmiConfig.IRT_MS;
 import static com.android.server.hdmi.HdmiConfig.TIMEOUT_MS;
 
 import android.media.AudioManager;
+import android.widget.Toast;
+
+import com.android.internal.R;
 
 /**
  * Feature action that transmits volume change to Audio Receiver.
@@ -37,6 +41,7 @@ final class VolumeControlAction extends HdmiCecFeatureAction {
 
     // State that wait for next volume press.
     private static final int STATE_WAIT_FOR_NEXT_VOLUME_PRESS = 1;
+    private static final int STATE_WAIT_FOR_REPORT_AUDIO_STATUS = 2;
     private static final int MAX_VOLUME = 100;
 
     private static final int UNKNOWN_AVR_VOLUME = -1;
@@ -77,6 +82,8 @@ final class VolumeControlAction extends HdmiCecFeatureAction {
         mLastAvrVolume = UNKNOWN_AVR_VOLUME;
         mLastAvrMute = false;
         mSentKeyPressed = false;
+
+        updateLastKeyUpdateTime();
     }
 
     private void updateLastKeyUpdateTime() {
@@ -101,13 +108,23 @@ final class VolumeControlAction extends HdmiCecFeatureAction {
 
     private void resetTimer() {
         mActionTimer.clearTimerMessage();
-        addTimer(STATE_WAIT_FOR_NEXT_VOLUME_PRESS, TIMEOUT_MS * 2);
+        // android input key time interval is 50ms.
+        addTimer(STATE_WAIT_FOR_NEXT_VOLUME_PRESS, IRT_MS);
+        addTimer(STATE_WAIT_FOR_REPORT_AUDIO_STATUS, TIMEOUT_MS * 2);
     }
 
     void handleVolumeChange(boolean isVolumeUp) {
-        HdmiLogger.debug("Volume Key Status Changed[old:%b new:%b]", mIsVolumeUp, isVolumeUp);
+        HdmiLogger.info("Volume Key Status Changed[old:%b new:%b]", mIsVolumeUp, isVolumeUp);
+        // The time interval of android key events is 50ms, and just fire them.
         mIsVolumeUp = isVolumeUp;
         sendVolumeKeyPressed();
+        updateLastKeyUpdateTime();
+    }
+
+    private void sendVolumeKeyReleased() {
+        sendCommand(HdmiCecMessageBuilder.buildUserControlReleased(
+                getSourceAddress(), mAvrAddress));
+        mSentKeyPressed = false;
     }
 
     @Override
@@ -126,14 +143,15 @@ final class VolumeControlAction extends HdmiCecFeatureAction {
     }
 
     private boolean handleReportAudioStatus(HdmiCecMessage cmd) {
-        byte params[] = cmd.getParams();
         boolean mute = HdmiUtils.isAudioStatusMute(cmd);
         int volume = HdmiUtils.getAudioStatusVolume(cmd);
         mLastAvrVolume = volume;
         mLastAvrMute = mute;
-        HdmiLogger.debug("Force volume change[mute:%b, volume=%d]", mute, volume);
+        HdmiLogger.info("update volume state form avr[mute:%b, volume=%d]", mute, volume);
         if (shouldUpdateAudioVolume(mute)) {
             HdmiLogger.info("Update TV's volume to be in accord with the avr");
+            showHint();
+
             tv().setAudioStatus(mute, volume);
             mLastAvrVolume = UNKNOWN_AVR_VOLUME;
             mLastAvrMute = false;
@@ -173,19 +191,35 @@ final class VolumeControlAction extends HdmiCecFeatureAction {
     @Override
     protected void clear() {
         super.clear();
-        if (mLastAvrVolume != UNKNOWN_AVR_VOLUME) {
+        AudioManager audioManager = tv().getService().getAudioManager();
+        int currentVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
+        HdmiLogger.debug("final tv current volume=%d, avr volume=%d", currentVolume, mLastAvrVolume);
+        if ((mLastAvrVolume != UNKNOWN_AVR_VOLUME) && (currentVolume != mLastAvrVolume)) {
+            showHint();
             tv().setAudioStatus(mLastAvrMute, mLastAvrVolume);
             mLastAvrVolume = UNKNOWN_AVR_VOLUME;
             mLastAvrMute = false;
         }
     }
 
+    private void showHint() {
+        Toast hint =Toast.makeText(tv().getService().getContext(), R.string.sync_audio_system_volume,
+            Toast.LENGTH_LONG);
+        hint.show();
+    }
+
     @Override
     void handleTimerEvent(int state) {
-        if (state != STATE_WAIT_FOR_NEXT_VOLUME_PRESS) {
+        if (state == STATE_WAIT_FOR_NEXT_VOLUME_PRESS) {
+            if (mSentKeyPressed
+                && (System.currentTimeMillis() - mLastKeyUpdateTime >= IRT_MS)) {
+                sendVolumeKeyReleased();
+                mSentKeyPressed = false;
+            }
             return;
+        } else if (state == STATE_WAIT_FOR_REPORT_AUDIO_STATUS) {
+            HdmiLogger.info("VolumeControlAction timeout for report audio status");
+            finish();
         }
-
-        finish();
     }
 }
-- 
2.26.1

