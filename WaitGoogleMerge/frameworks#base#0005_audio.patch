From 08fce8e534b2a74156825370a4de79c0a76157ae Mon Sep 17 00:00:00 2001
From: "an.xi" <an.xi@amlogic.com>
Date: Mon, 8 Mar 2021 19:05:43 +0800
Subject: [PATCH] cec: add volume keyevent paththrough for NTS [1/2]

PD#SWPL-39241

Problem:
NTS volume paththrough feature. When user uses playback's
remote to control volume in ddp5.0 format, playback should
transfer the volume keyevents to tv.

Solution:
Transfer the volume keyevents to TV when the playback is
using dpp5.0 audio format.

Verify:
newton

Change-Id: I3e3f53b7c64a17fb204ffba9d3189b2ae3f74b6f
Signed-off-by: an.xi <an.xi@amlogic.com>
---
 core/res/res/values-zh-rCN/strings.xml        |   1 +
 core/res/res/values/strings.xml               |   2 +
 core/res/res/values/symbols.xml               |   1 +
 .../android/server/audio/AudioService.java    | 350 +++++++++++++-----
 4 files changed, 264 insertions(+), 90 deletions(-)

diff --git a/core/res/res/values-zh-rCN/strings.xml b/core/res/res/values-zh-rCN/strings.xml
index a645cd7db90a..cadcd21b7bf6 100644
--- a/core/res/res/values-zh-rCN/strings.xml
+++ b/core/res/res/values-zh-rCN/strings.xml
@@ -1986,6 +1986,7 @@
     <string name="screenshot_edit" msgid="7408934887203689207">"编辑"</string>
     <string name="volume_dialog_ringer_guidance_vibrate" msgid="2055927873175228519">"有来电和通知时会振动"</string>
     <string name="volume_dialog_ringer_guidance_silent" msgid="1011246774949993783">"有来电和通知时会静音"</string>
+    <string name="volume_passthrough_hint">如果音量无法调节，请换用TV遥控器</string>
     <string name="notification_channel_system_changes" msgid="2462010596920209678">"系统变更"</string>
     <string name="notification_channel_do_not_disturb" msgid="7832584281883687653">"勿扰"</string>
     <string name="zen_upgrade_notification_visd_title" msgid="2001148984371968620">"新功能：勿扰模式目前可隐藏通知"</string>
diff --git a/core/res/res/values/strings.xml b/core/res/res/values/strings.xml
index d6ee28b93f92..bf172ddd1550 100644
--- a/core/res/res/values/strings.xml
+++ b/core/res/res/values/strings.xml
@@ -5304,6 +5304,8 @@
     <string name="volume_dialog_ringer_guidance_vibrate">Calls and notifications will vibrate</string>
     <string name="volume_dialog_ringer_guidance_silent">Calls and notifications will be muted</string>
 
+    <string name="volume_passthrough_hint">If the volume can not be adjusted, please switch to the TV remote control</string>
+
     <!-- Title for the notification channel notifying user of settings system changes. [CHAR LIMIT=NONE] -->
     <string name="notification_channel_system_changes">System changes</string>
     <!-- Title for the notification channel notifying user of do not disturb system changes (i.e. Do Not Disturb has changed). [CHAR LIMIT=NONE] -->
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index 06f357e79a62..ea359c495f92 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -1038,6 +1038,7 @@
   <java-symbol type="string" name="volume_icon_description_ringer" />
   <java-symbol type="string" name="volume_dialog_ringer_guidance_vibrate" />
   <java-symbol type="string" name="volume_dialog_ringer_guidance_silent" />
+  <java-symbol type="string" name="volume_passthrough_hint" />
   <java-symbol type="string" name="wait" />
   <java-symbol type="string" name="webpage_unresponsive" />
   <java-symbol type="string" name="whichApplication" />
diff --git a/services/core/java/com/android/server/audio/AudioService.java b/services/core/java/com/android/server/audio/AudioService.java
index e921f04e825f..40caffeffe60 100644
--- a/services/core/java/com/android/server/audio/AudioService.java
+++ b/services/core/java/com/android/server/audio/AudioService.java
@@ -143,6 +143,7 @@ import android.widget.Toast;
 
 import com.android.internal.annotations.GuardedBy;
 import com.android.internal.annotations.VisibleForTesting;
+import com.android.internal.R;
 import com.android.internal.util.DumpUtils;
 import com.android.internal.util.Preconditions;
 import com.android.server.EventLogTags;
@@ -153,6 +154,7 @@ import com.android.server.audio.AudioServiceEvents.VolumeEvent;
 import com.android.server.pm.UserManagerService;
 import com.android.server.wm.ActivityTaskManagerInternal;
 
+import java.io.File;
 import java.io.FileDescriptor;
 import java.io.IOException;
 import java.io.PrintWriter;
@@ -188,7 +190,7 @@ public class AudioService extends IAudioService.Stub
         implements AccessibilityManager.TouchExplorationStateChangeListener,
             AccessibilityManager.AccessibilityServicesStateChangeListener {
 
-    private static final String TAG = "AS.AudioService";
+    private static final String TAG = "AudioService";
 
     private final AudioSystemAdapter mAudioSystem;
     private final SystemServerAdapter mSystemServer;
@@ -200,7 +202,7 @@ public class AudioService extends IAudioService.Stub
     protected static final boolean DEBUG_AP = false;
 
     /** Debug volumes */
-    protected static final boolean DEBUG_VOL = false;
+    protected static final boolean DEBUG_VOL = Log.isLoggable(TAG, Log.DEBUG);
 
     /** debug calls to devices APIs */
     protected static final boolean DEBUG_DEVICES = false;
@@ -829,6 +831,10 @@ public class AudioService extends IAudioService.Stub
 
         mRecordMonitor = new RecordingActivityMonitor(mContext);
 
+        // Volume passhrough feature could be enabled for all projects.
+        mVolumePassthroughEnabled = SystemProperties.getBoolean(PROP_VOLUME_PASSTHROUGH, true);
+        mSupportDolbyMS12 = new File(PATH_LIB_DOLBY_SM12).exists();
+
         // must be called before readPersistedSettings() which needs a valid mStreamVolumeAlias[]
         // array initialized by updateStreamVolumeAlias()
         updateStreamVolumeAlias(false /*updateVolumes*/, TAG);
@@ -1357,6 +1363,7 @@ public class AudioService extends IAudioService.Stub
 
     private void onCheckVolumeCecOnHdmiConnection(
             @AudioService.ConnectionState int state, String caller) {
+        Slog.d(TAG, "onCheckVolumeCecOnHdmiConnection " + state);
         if (state == AudioService.CONNECTION_STATE_CONNECTED) {
             // DEVICE_OUT_HDMI is now connected
             if (mSafeMediaVolumeDevices.contains(AudioSystem.DEVICE_OUT_HDMI)) {
@@ -1369,22 +1376,18 @@ public class AudioService extends IAudioService.Stub
                         MUSIC_ACTIVE_POLL_PERIOD_MS);
             }
 
-            if (isPlatformTelevision()) {
-                checkAddAllFixedVolumeDevices(AudioSystem.DEVICE_OUT_HDMI, caller);
-                synchronized (mHdmiClientLock) {
-                    if (mHdmiManager != null && mHdmiPlaybackClient != null) {
-                        updateHdmiCecSinkLocked(mHdmiCecSink | false);
-                    }
+            synchronized (mHdmiClientLock) {
+                if (mHdmiManager != null && mHdmiPlaybackClient != null) {
+                    mHdmiPlaybackClient.queryDisplayStatus(mHdmiDisplayStatusCallback);
                 }
             }
+
             sendEnabledSurroundFormats(mContentResolver, true);
         } else {
             // DEVICE_OUT_HDMI disconnected
-            if (isPlatformTelevision()) {
-                synchronized (mHdmiClientLock) {
-                    if (mHdmiManager != null) {
-                        updateHdmiCecSinkLocked(mHdmiCecSink | false);
-                    }
+            synchronized (mHdmiClientLock) {
+                if (mHdmiManager != null) {
+                    updateHdmiCecSinkLocked(false);
                 }
             }
         }
@@ -1405,8 +1408,7 @@ public class AudioService extends IAudioService.Stub
         }
     }
 
-    private void checkAllFixedVolumeDevices()
-    {
+    private void checkAllFixedVolumeDevices() {
         int numStreamTypes = AudioSystem.getNumStreamTypes();
         for (int streamType = 0; streamType < numStreamTypes; streamType++) {
             mStreamStates[streamType].checkFixedVolumeDevices();
@@ -1417,6 +1419,10 @@ public class AudioService extends IAudioService.Stub
         mStreamStates[streamType].checkFixedVolumeDevices();
     }
 
+    private void checkAllFixedVolumeDevicesForCec(int streamType) {
+        mStreamStates[streamType].checkFixedVolumeDevicesForCec();
+    }
+
     private void checkMuteAffectedStreams() {
         // any stream with a min level > 0 is not muteable by definition
         // STREAM_VOICE_CALL and STREAM_BLUETOOTH_SCO can be muted by applications
@@ -2121,7 +2127,7 @@ public class AudioService extends IAudioService.Stub
             return;
         }
         if (DEBUG_VOL) Log.d(TAG, "adjustStreamVolume() stream=" + streamType + ", dir=" + direction
-                + ", flags=" + flags + ", caller=" + caller);
+                + ", flags=" + flags + ", keyEventMode=" + keyEventMode + ", caller=" + caller);
 
         ensureValidDirection(direction);
         ensureValidStreamType(streamType);
@@ -2242,11 +2248,13 @@ public class AudioService extends IAudioService.Stub
             adjustVolume = false;
         }
         int oldIndex = mStreamStates[streamType].getIndex(device);
+        synchronized (mHdmiClientLock) {
+            passthroughToTv(streamType, direction, oldIndex, oldIndex, keyEventMode);
+        }
 
         if (adjustVolume
                 && (direction != AudioManager.ADJUST_SAME) && (keyEventMode != VOL_ADJUST_END)) {
             mAudioHandler.removeMessages(MSG_UNMUTE_STREAM);
-
             if (isMuteAdjust) {
                 boolean state;
                 if (direction == AudioManager.ADJUST_TOGGLE_MUTE) {
@@ -2270,7 +2278,7 @@ public class AudioService extends IAudioService.Stub
                     !checkSafeMediaVolume(streamTypeAlias, aliasIndex + step, device)) {
                 Log.e(TAG, "adjustStreamVolume() safe volume index = " + oldIndex);
                 mVolumeController.postDisplaySafeVolumeWarning(flags);
-            } else if (!isFullVolumeDevice(device)
+            } else if (!isInVolumePassthrough()
                     && (streamState.adjustIndex(direction * step, device, caller,
                             hasModifyAudioSettings)
                             || streamState.mIsMuted)) {
@@ -2331,60 +2339,14 @@ public class AudioService extends IAudioService.Stub
 
         final int newIndex = mStreamStates[streamType].getIndex(device);
 
-        if (adjustVolume) {
-            synchronized (mHdmiClientLock) {
-                if (mHdmiManager != null) {
-                    // mHdmiCecSink true => mHdmiPlaybackClient != null
-                    if (mHdmiCecSink
-                            && mHdmiCecVolumeControlEnabled
-                            && streamTypeAlias == AudioSystem.STREAM_MUSIC
-                            // vol change on a full volume device
-                            && isFullVolumeDevice(device)) {
-                        int keyCode = KeyEvent.KEYCODE_UNKNOWN;
-                        switch (direction) {
-                            case AudioManager.ADJUST_RAISE:
-                                keyCode = KeyEvent.KEYCODE_VOLUME_UP;
-                                break;
-                            case AudioManager.ADJUST_LOWER:
-                                keyCode = KeyEvent.KEYCODE_VOLUME_DOWN;
-                                break;
-                            case AudioManager.ADJUST_TOGGLE_MUTE:
-                                keyCode = KeyEvent.KEYCODE_VOLUME_MUTE;
-                                break;
-                            default:
-                                break;
-                        }
-                        if (keyCode != KeyEvent.KEYCODE_UNKNOWN) {
-                            final long ident = Binder.clearCallingIdentity();
-                            try {
-                                final long time = java.lang.System.currentTimeMillis();
-                                switch (keyEventMode) {
-                                    case VOL_ADJUST_NORMAL:
-                                        mHdmiPlaybackClient.sendVolumeKeyEvent(keyCode, true);
-                                        mHdmiPlaybackClient.sendVolumeKeyEvent(keyCode, false);
-                                        break;
-                                    case VOL_ADJUST_START:
-                                        mHdmiPlaybackClient.sendVolumeKeyEvent(keyCode, true);
-                                        break;
-                                    case VOL_ADJUST_END:
-                                        mHdmiPlaybackClient.sendVolumeKeyEvent(keyCode, false);
-                                        break;
-                                    default:
-                                        Log.e(TAG, "Invalid keyEventMode " + keyEventMode);
-                                }
-                            } finally {
-                                Binder.restoreCallingIdentity(ident);
-                            }
-                        }
-                    }
-
-                    if (streamTypeAlias == AudioSystem.STREAM_MUSIC
-                            && (oldIndex != newIndex || isMuteAdjust)) {
-                        maybeSendSystemAudioStatusCommand(isMuteAdjust);
-                    }
-                }
+        synchronized (mHdmiClientLock) {
+            if (adjustVolume &&mHdmiManager != null
+                    && streamTypeAlias == AudioSystem.STREAM_MUSIC
+                    && (oldIndex != newIndex || isMuteAdjust)) {
+                maybeSendSystemAudioStatusCommand(isMuteAdjust);
             }
         }
+
         sendVolumeUpdate(streamType, oldIndex, newIndex, flags, device);
     }
 
@@ -2860,11 +2822,22 @@ public class AudioService extends IAudioService.Stub
                     && (oldIndex != index)) {
                 maybeSendSystemAudioStatusCommand(false);
             }
+            passthroughToTv(streamType, 0, oldIndex, index, VOL_ADJUST_NORMAL);
         }
         sendVolumeUpdate(streamType, oldIndex, index, flags, device);
     }
 
-
+    private int getDirection(int newIndex, int oldIndex, int maxIndex, int minIndex) {
+        Slog.d(TAG, "new=" + newIndex + " old=" + oldIndex + " max=" + maxIndex + " min=" + minIndex);
+        int direction = AudioManager.ADJUST_SAME;
+        int offset = newIndex - oldIndex;
+        if (offset > 0 || (offset == 0 && newIndex == maxIndex)) {
+            direction = AudioManager.ADJUST_RAISE;
+        } else if (offset < 0 || (offset == 0 && newIndex == minIndex)) {
+            direction = AudioManager.ADJUST_LOWER;
+        }
+        return direction;
+    }
 
     private int getVolumeGroupIdForAttributes(@NonNull AudioAttributes attributes) {
         Objects.requireNonNull(attributes, "attributes must not be null");
@@ -3024,7 +2997,9 @@ public class AudioService extends IAudioService.Stub
 
         if (streamType == AudioSystem.STREAM_MUSIC) {
             flags = updateFlagsForTvPlatform(flags);
-            if (isFullVolumeDevice(device)) {
+            // The volume bar ui shows depends on whether the device is in passthrough mode.
+            if (isInVolumePassthrough()) {
+                Slog.d(TAG, "no volume bar");
                 flags &= ~AudioManager.FLAG_SHOW_UI;
             }
         }
@@ -3033,12 +3008,12 @@ public class AudioService extends IAudioService.Stub
 
     // Don't show volume UI when:
     //  - Hdmi-CEC system audio mode is on and we are a TV panel
-    //  - CEC volume control enabled on a set-top box
     private int updateFlagsForTvPlatform(int flags) {
         synchronized (mHdmiClientLock) {
-            if ((mHdmiTvClient != null && mHdmiSystemAudioSupported && mHdmiCecVolumeControlEnabled)
-                    || (mHdmiPlaybackClient != null && mHdmiCecVolumeControlEnabled)) {
-                flags &= ~AudioManager.FLAG_SHOW_UI;
+            if (mHdmiTvClient != null && mHdmiSystemAudioSupported
+                    && mHdmiCecVolumeControlEnabled) {
+                // TV should always show its own volume bar.
+                //flags &= ~AudioManager.FLAG_SHOW_UI;
             }
         }
         return flags;
@@ -3075,7 +3050,10 @@ public class AudioService extends IAudioService.Stub
                                     int device,
                                     boolean force,
                                     String caller, boolean hasModifyAudioSettings) {
-        if (isFullVolumeDevice(device)) {
+        if (isInVolumePassthrough()) {
+            if (DEBUG_VOL) {
+                Slog.d(TAG, "setStreamVolumeInt is of no need in passthrough audio format.");
+            }
             return;
         }
         VolumeStreamState streamState = mStreamStates[streamType];
@@ -6077,6 +6055,9 @@ public class AudioService extends IAudioService.Stub
 
         public void checkFixedVolumeDevices() {
             synchronized (VolumeStreamState.class) {
+                if (DEBUG_VOL) {
+                    Slog.d(TAG, "checkFixedVolumeDevices");
+                }
                 // ignore settings for fixed volume devices: volume should always be at max or 0
                 if (mStreamVolumeAlias[mStreamType] == AudioSystem.STREAM_MUSIC) {
                     for (int i = 0; i < mIndexMap.size(); i++) {
@@ -6092,6 +6073,25 @@ public class AudioService extends IAudioService.Stub
             }
         }
 
+        public void checkFixedVolumeDevicesForCec() {
+            synchronized (VolumeStreamState.class) {
+                if (DEBUG_VOL) {
+                    Slog.d(TAG, "checkFixedVolumeDevicesForCec");
+                }
+                // ignore settings for fixed volume devices: volume should always be at max or 0
+                if (mStreamVolumeAlias[mStreamType] == AudioSystem.STREAM_MUSIC) {
+                    for (int i = 0; i < mIndexMap.size(); i++) {
+                        int device = mIndexMap.keyAt(i);
+                        int index = mIndexMap.valueAt(i);
+                        if ((isFixedVolumeDevice(device) && index != 0)) {
+                            mIndexMap.put(device, mIndexMax);
+                        }
+                        applyDeviceVolume_syncVSS(device);
+                    }
+                }
+            }
+        }
+
         private int getValidIndex(int index, boolean hasModifyAudioSettings) {
             final int indexMin = hasModifyAudioSettings ? mIndexMin : mIndexMinNoPerm;
             if (index < indexMin) {
@@ -7270,25 +7270,19 @@ public class AudioService extends IAudioService.Stub
 
     @GuardedBy("mHdmiClientLock")
     private void updateHdmiCecSinkLocked(boolean hdmiCecSink) {
+        Log.d(TAG, "updateHdmiCecSinkLocked " + hdmiCecSink);
         mHdmiCecSink = hdmiCecSink;
         if (!hasDeviceVolumeBehavior(AudioSystem.DEVICE_OUT_HDMI)) {
             if (mHdmiCecSink) {
-                if (DEBUG_VOL) {
-                    Log.d(TAG, "CEC sink: setting HDMI as full vol device");
-                }
-                addAudioSystemDeviceOutToFullVolumeDevices(AudioSystem.DEVICE_OUT_HDMI);
+                Slog.i(TAG, "CEC sink: setting HDMI as full vol device");
+                //addAudioSystemDeviceOutToFullVolumeDevices(AudioSystem.DEVICE_OUT_HDMI);
             } else {
-                if (DEBUG_VOL) {
-                    Log.d(TAG, "TV, no CEC: setting HDMI as regular vol device");
-                }
+                Slog.i(TAG, "TV, no CEC: setting HDMI as regular vol device");
                 // Android TV devices without CEC service apply software volume on
                 // HDMI output
-                removeAudioSystemDeviceOutFromFullVolumeDevices(AudioSystem.DEVICE_OUT_HDMI);
+                //removeAudioSystemDeviceOutFromFullVolumeDevices(AudioSystem.DEVICE_OUT_HDMI);
             }
         }
-
-        checkAddAllFixedVolumeDevices(AudioSystem.DEVICE_OUT_HDMI,
-                "HdmiPlaybackClient.DisplayStatusCallback");
     }
 
     private class MyHdmiControlStatusChangeListenerCallback
@@ -7296,7 +7290,21 @@ public class AudioService extends IAudioService.Stub
         public void onStatusChange(boolean isCecEnabled, boolean isCecAvailable) {
             synchronized (mHdmiClientLock) {
                 if (mHdmiManager == null) return;
+                Slog.d(TAG, "cec status change enabled=" + isCecEnabled + " available=" + isCecAvailable);
                 updateHdmiCecSinkLocked(isCecEnabled ? isCecAvailable : false);
+                if (isCecEnabled != mHdmiCecEnabled) {
+                    mHdmiCecEnabled = isCecEnabled;
+                    // reset the volume to max when cec switch changes.
+                    checkAllFixedVolumeDevicesForCec(AudioSystem.STREAM_MUSIC);
+                    if (isCecEnabled && !isCecAvailable) {
+                        // try again if tv is not available to avoid compat issues.
+                        synchronized (mHdmiClientLock) {
+                            if (mHdmiPlaybackClient != null) {
+                                mHdmiPlaybackClient.queryDisplayStatus(mHdmiDisplayStatusCallback);
+                            }
+                        }
+                    }
+                }
             }
         }
     };
@@ -7311,6 +7319,15 @@ public class AudioService extends IAudioService.Stub
         }
     };
 
+    private class MyDisplayStatusCallback implements HdmiPlaybackClient.DisplayStatusCallback {
+        public void onComplete(int status) {
+            synchronized (mHdmiClientLock) {
+                if (mHdmiManager == null) return;
+                updateHdmiCecSinkLocked(status != HdmiControlManager.POWER_STATUS_UNKNOWN);
+            }
+        }
+    };
+
     private final Object mHdmiClientLock = new Object();
 
     // If HDMI-CEC system audio is supported
@@ -7337,12 +7354,161 @@ public class AudioService extends IAudioService.Stub
     @GuardedBy("mHdmiClientLock")
     private boolean mHdmiCecVolumeControlEnabled;
 
-    private MyHdmiControlStatusChangeListenerCallback mHdmiControlStatusChangeListenerCallback =
+    // CEC Volume Passthrough feature related
+    private boolean mVolumePassthroughEnabled;
+    private boolean mSupportDolbyMS12;
+    private boolean mInVolumePassthrough;
+    private boolean mShowingPassthroughHint;
+
+    private boolean mHdmiCecEnabled = true;
+
+    private final Handler mHandler = new Handler();
+
+    private static final String PROP_VOLUME_PASSTHROUGH = "ro.hdmi.volume.passthrough";
+    private static final String PROP_VOLUME_CH_ENABLE = "sys.audio.passthrough";
+    private static final String PROP_PASSTHOURGH_TOAST = "sys.audio.passthrough.toast";
+    private static final String PATH_LIB_DOLBY_SM12 = "/odm/lib/ms12/libdolbyms12.so";
+    private static final String PARA_VOLUME_PASSTHROUGH = "hal_param_cec_control_tv";
+    private static final String HAL_IN_VOLUME_PASSTHROUGH = "hal_param_cec_control_tv=1";
+
+    //==========================================================================================
+    // Volume Passthrough
+    private boolean passthroughToTv(int streamType, int direction, int oldIndex, int newIndex, int keyEventMode) {
+        if (mHdmiManager == null || mHdmiPlaybackClient == null) {
+            // only for box devices
+            mInVolumePassthrough = false;
+            return false;
+        }
+
+        if (mStreamVolumeAlias[streamType] != AudioSystem.STREAM_MUSIC) {
+            if (DEBUG_VOL) {
+                Slog.d(TAG, "passthroughToTv not music stream type.");
+            }
+            mInVolumePassthrough = false;
+            return false;
+        }
+
+        // Not support passthrough feature
+        if (!mVolumePassthroughEnabled || mSupportDolbyMS12) {
+            if (DEBUG_VOL) {
+                Slog.d(TAG, "passthroughToTv not support.");
+            }
+            mInVolumePassthrough = false;
+            return false;
+        }
+
+        mInVolumePassthrough = SystemProperties.getBoolean(PROP_VOLUME_CH_ENABLE, false)
+            || HAL_IN_VOLUME_PASSTHROUGH.equals(AudioSystem.getParameters(PARA_VOLUME_PASSTHROUGH));
+
+        // Not in passthrough audio channel
+        if (!mInVolumePassthrough) {
+            if (DEBUG_VOL) {
+                Slog.d(TAG, "passthroughToTv not in passthrough audio format.");
+            }
+            return false;
+        }
+
+        mInVolumePassthrough = mHdmiCecSink && mHdmiCecVolumeControlEnabled;
+
+        // mHdmiCecSink true => mHdmiPlaybackClient != null && playback cec enalbed && tv cec enabled
+        if (mInVolumePassthrough) {
+            int keyCode = KeyEvent.KEYCODE_UNKNOWN;
+            if (direction == 0) {
+                direction = getDirection(newIndex, oldIndex, mStreamStates[streamType].getMaxIndex(),
+                                                        mStreamStates[streamType].getMinIndex());
+            }
+            switch (direction) {
+                case AudioManager.ADJUST_RAISE:
+                    keyCode = KeyEvent.KEYCODE_VOLUME_UP;
+                    break;
+                case AudioManager.ADJUST_LOWER:
+                    keyCode = KeyEvent.KEYCODE_VOLUME_DOWN;
+                    break;
+                case AudioManager.ADJUST_MUTE:
+                case AudioManager.ADJUST_TOGGLE_MUTE:
+                    keyCode = KeyEvent.KEYCODE_VOLUME_MUTE;
+                    break;
+                default:
+                    break;
+            }
+            if (DEBUG_VOL) {
+                Slog.d(TAG, "passthroughToTv send direction=" + direction + " key=" + keyCode);
+            }
+            if (keyCode != KeyEvent.KEYCODE_UNKNOWN) {
+                final long ident = Binder.clearCallingIdentity();
+                try {
+                    final long time = java.lang.System.currentTimeMillis();
+                    switch (keyEventMode) {
+                        case VOL_ADJUST_NORMAL:
+                            mHdmiPlaybackClient.sendVolumeKeyEvent(keyCode, true);
+                            mHdmiPlaybackClient.sendVolumeKeyEvent(keyCode, false);
+                            break;
+                        case VOL_ADJUST_START:
+                            mHdmiPlaybackClient.sendVolumeKeyEvent(keyCode, true);
+                            break;
+                        case VOL_ADJUST_END:
+                            mHdmiPlaybackClient.sendVolumeKeyEvent(keyCode, false);
+                            break;
+                        default:
+                            Log.e(TAG, "Invalid keyEventMode " + keyEventMode);
+                    }
+                } finally {
+                    Binder.restoreCallingIdentity(ident);
+                }
+            }
+
+            // show a hint to help the user switch to tv's remote in case tv does not
+            // support volume change even it receives the cec volume key events.
+            showPassthroughToast();
+            return true;
+        }
+        if (DEBUG_VOL) {
+            Slog.d(TAG, "passthroughToTv cec disabled or tv no suport cec!");
+        }
+
+        // show a warning to help the user switch to tv's remote when no key events is sent.
+        showPassthroughWarning();
+        return false;
+    }
+
+    private void showPassthroughToast() {
+        boolean showForEveryBoot  = SystemProperties.getBoolean(PROP_PASSTHOURGH_TOAST, true);
+        if (showForEveryBoot) {
+            Slog.d(TAG, "show passthrough hint for the first time");
+            showPassthroughWarning();
+            SystemProperties.set(PROP_PASSTHOURGH_TOAST, "false");
+        }
+    }
+
+    private void showPassthroughWarning() {
+        if (mShowingPassthroughHint) {
+            Slog.d(TAG, "on need to show other passthrough hint");
+            return;
+        }
+        mShowingPassthroughHint = true;
+        mHandler.post(()->{
+            Toast toast = Toast.makeText(mContext, com.android.internal.R.string.volume_passthrough_hint, Toast.LENGTH_LONG);
+            toast.addCallback(new Toast.Callback() {
+                public void onToastHidden() {
+                    mShowingPassthroughHint = false;
+                }
+            });
+            toast.show();
+        });
+    }
+
+    private boolean isInVolumePassthrough() {
+        return mInVolumePassthrough;
+    }
+
+    private final MyHdmiControlStatusChangeListenerCallback mHdmiControlStatusChangeListenerCallback =
             new MyHdmiControlStatusChangeListenerCallback();
 
-    private MyHdmiCecVolumeControlFeatureListener mMyHdmiCecVolumeControlFeatureListener =
+    private final MyHdmiCecVolumeControlFeatureListener mMyHdmiCecVolumeControlFeatureListener =
             new MyHdmiCecVolumeControlFeatureListener();
 
+    private final MyDisplayStatusCallback mHdmiDisplayStatusCallback = new MyDisplayStatusCallback();
+
     @Override
     public int setHdmiSystemAudioSupported(boolean on) {
         int device = AudioSystem.DEVICE_NONE;
@@ -7579,6 +7745,7 @@ public class AudioService extends IAudioService.Stub
         pw.print("  mIsSingleVolume="); pw.println(mIsSingleVolume);
         pw.print("  mUseFixedVolume="); pw.println(mUseFixedVolume);
         pw.print("  mFixedVolumeDevices="); pw.println(dumpDeviceTypes(mFixedVolumeDevices));
+        pw.print("  mFullVolumeDevices="); pw.println(dumpDeviceTypes(mFullVolumeDevices));
         pw.print("  mExtVolumeController="); pw.println(mExtVolumeController);
         pw.print("  mHdmiCecSink="); pw.println(mHdmiCecSink);
         pw.print("  mHdmiAudioSystemClient="); pw.println(mHdmiAudioSystemClient);
@@ -7586,6 +7753,9 @@ public class AudioService extends IAudioService.Stub
         pw.print("  mHdmiTvClient="); pw.println(mHdmiTvClient);
         pw.print("  mHdmiSystemAudioSupported="); pw.println(mHdmiSystemAudioSupported);
         pw.print("  mHdmiCecVolumeControlEnabled="); pw.println(mHdmiCecVolumeControlEnabled);
+        pw.print("  mVolumePassthroughEnabled="); pw.println(mVolumePassthroughEnabled);
+        pw.print("  mSupportDolbyMS12="); pw.println(mSupportDolbyMS12);
+        pw.print("  mInVolumePassthrough="); pw.println(mInVolumePassthrough);
         pw.print("  mIsCallScreeningModeSupported="); pw.println(mIsCallScreeningModeSupported);
         pw.print("  mic mute FromSwitch=" + mMicMuteFromSwitch
                         + " FromRestrictions=" + mMicMuteFromRestrictions
-- 
2.26.1

