From 9927fa8b51750598dd2bbe83dc035864ccac9852 Mon Sep 17 00:00:00 2001
From: "an.xi" <an.xi@amlogic.com>
Date: Wed, 12 May 2021 13:29:38 +0800
Subject: [PATCH] cec: update the way of showing passthrough warning [1/1]

PD# SWPL-49632

Problem:
Originally box can't adjust the volume itsself if there
is no MS12 library for dolby audio format. Somehow now
the box could do it with cvbs, then the passthrough
warning to the user is of no meaning.

Solution:
Completely abandon the way of using the property set
by audioflinger. Only use the result returned from
audio hal.

Verify:
ohm

Change-Id: Ia971b1e7cc9d0c4d3d7ba9ba8d65030ed43eb480
Signed-off-by: an.xi <an.xi@amlogic.com>
---
 .../android/server/audio/AudioService.java    | 43 +++++++++----------
 1 file changed, 21 insertions(+), 22 deletions(-)

diff --git a/services/core/java/com/android/server/audio/AudioService.java b/services/core/java/com/android/server/audio/AudioService.java
index 528f1438c779..8ff4b7d74214 100755
--- a/services/core/java/com/android/server/audio/AudioService.java
+++ b/services/core/java/com/android/server/audio/AudioService.java
@@ -2819,7 +2819,8 @@ public class AudioService extends IAudioService.Stub
     }
 
     private int getDirection(int newIndex, int oldIndex, int maxIndex, int minIndex) {
-        Slog.d(TAG, "new=" + newIndex + " old=" + oldIndex + " max=" + maxIndex + " min=" + minIndex);
+        Slog.d(TAG, "new=" + newIndex + " old=" + oldIndex + " max=" + maxIndex
+                        + " min=" + minIndex);
         int direction = AudioManager.ADJUST_SAME;
         int offset = newIndex - oldIndex;
         if (offset > 0 || (offset == 0 && newIndex == maxIndex)) {
@@ -6058,9 +6059,6 @@ public class AudioService extends IAudioService.Stub
 
         public void checkFixedVolumeDevices() {
             synchronized (VolumeStreamState.class) {
-                if (DEBUG_VOL) {
-                    Slog.d(TAG, "checkFixedVolumeDevices");
-                }
                 // ignore settings for fixed volume devices: volume should always be at max or 0
                 if (mStreamVolumeAlias[mStreamType] == AudioSystem.STREAM_MUSIC) {
                     for (int i = 0; i < mIndexMap.size(); i++) {
@@ -7293,7 +7291,8 @@ public class AudioService extends IAudioService.Stub
         public void onStatusChange(boolean isCecEnabled, boolean isCecAvailable) {
             synchronized (mHdmiClientLock) {
                 if (mHdmiManager == null) return;
-                Slog.d(TAG, "cec status change enabled=" + isCecEnabled + " available=" + isCecAvailable);
+                Slog.d(TAG, "cec status change enabled=" + isCecEnabled
+                                + " available=" + isCecAvailable);
                 updateHdmiCecSinkLocked(isCecEnabled ? isCecAvailable : false);
                 if (isCecEnabled != mHdmiCecEnabled) {
                     mHdmiCecEnabled = isCecEnabled;
@@ -7376,10 +7375,11 @@ public class AudioService extends IAudioService.Stub
 
     //==========================================================================================
     // Volume Passthrough
-    private boolean passthroughToTv(int streamType, int direction, int oldIndex, int newIndex, int keyEventMode) {
+    private boolean passthroughToTv(int streamType, int direction, int oldIndex, int newIndex,
+                        int keyEventMode) {
+        mInVolumePassthrough = false;
         if (mHdmiManager == null || mHdmiPlaybackClient == null) {
             // only for box devices
-            mInVolumePassthrough = false;
             return false;
         }
 
@@ -7387,7 +7387,6 @@ public class AudioService extends IAudioService.Stub
             if (DEBUG_VOL) {
                 Slog.d(TAG, "passthroughToTv not music stream type.");
             }
-            mInVolumePassthrough = false;
             return false;
         }
 
@@ -7396,29 +7395,28 @@ public class AudioService extends IAudioService.Stub
             if (DEBUG_VOL) {
                 Slog.d(TAG, "passthroughToTv not support.");
             }
-            mInVolumePassthrough = false;
             return false;
         }
 
-        mInVolumePassthrough = SystemProperties.getBoolean(PROP_VOLUME_CH_ENABLE, false)
-            || HAL_IN_VOLUME_PASSTHROUGH.equals(AudioSystem.getParameters(PARA_VOLUME_PASSTHROUGH));
+        mInVolumePassthrough = HAL_IN_VOLUME_PASSTHROUGH
+                                     .equals(AudioSystem.getParameters(PARA_VOLUME_PASSTHROUGH));
 
+        Slog.d(TAG, "passthroughToTv passthrough:" + mInVolumePassthrough + " tv status:" + mHdmiCecSink);
         // Not in passthrough audio channel
         if (!mInVolumePassthrough) {
-            if (DEBUG_VOL) {
-                Slog.d(TAG, "passthroughToTv not in passthrough audio format.");
-            }
+            Slog.d(TAG, "passthroughToTv not in passthrough audio format.");
             return false;
         }
 
         mInVolumePassthrough = mHdmiCecSink && mHdmiCecVolumeControlEnabled;
 
-        // mHdmiCecSink true => mHdmiPlaybackClient != null && playback cec enalbed && tv cec enabled
+        // mHdmiCecSink true => mHdmiPlaybackClient != null
         if (mInVolumePassthrough) {
             int keyCode = KeyEvent.KEYCODE_UNKNOWN;
             if (direction == 0) {
-                direction = getDirection(newIndex, oldIndex, mStreamStates[streamType].getMaxIndex(),
-                                                        mStreamStates[streamType].getMinIndex());
+                direction = getDirection(newIndex, oldIndex,
+                                mStreamStates[streamType].getMaxIndex(),
+                                mStreamStates[streamType].getMinIndex());
             }
             switch (direction) {
                 case AudioManager.ADJUST_RAISE:
@@ -7466,7 +7464,7 @@ public class AudioService extends IAudioService.Stub
             return true;
         }
         if (DEBUG_VOL) {
-            Slog.d(TAG, "passthroughToTv cec disabled or tv no suport cec!");
+            Slog.d(TAG, "passthroughToTv cec disabled or tv no support cec!");
         }
 
         // show a warning to help the user switch to tv's remote when no key events is sent.
@@ -7490,7 +7488,8 @@ public class AudioService extends IAudioService.Stub
         }
         mShowingPassthroughHint = true;
         mHandler.post(()->{
-            Toast toast = Toast.makeText(mContext, com.android.internal.R.string.volume_passthrough_hint, Toast.LENGTH_LONG);
+            Toast toast = Toast.makeText(mContext,
+                    com.android.internal.R.string.volume_passthrough_hint, Toast.LENGTH_LONG);
             toast.addCallback(new Toast.Callback() {
                 public void onToastHidden() {
                     mShowingPassthroughHint = false;
@@ -7504,13 +7503,13 @@ public class AudioService extends IAudioService.Stub
         return mInVolumePassthrough;
     }
 
-    private final MyHdmiControlStatusChangeListenerCallback mHdmiControlStatusChangeListenerCallback =
+    private MyHdmiControlStatusChangeListenerCallback mHdmiControlStatusChangeListenerCallback =
             new MyHdmiControlStatusChangeListenerCallback();
 
-    private final MyHdmiCecVolumeControlFeatureListener mMyHdmiCecVolumeControlFeatureListener =
+    private MyHdmiCecVolumeControlFeatureListener mMyHdmiCecVolumeControlFeatureListener =
             new MyHdmiCecVolumeControlFeatureListener();
 
-    private final MyDisplayStatusCallback mHdmiDisplayStatusCallback = new MyDisplayStatusCallback();
+    private MyDisplayStatusCallback mHdmiDisplayStatusCallback = new MyDisplayStatusCallback();
 
     @Override
     public int setHdmiSystemAudioSupported(boolean on) {
-- 
2.26.1

