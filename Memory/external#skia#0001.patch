From fccd865bbccb92703439bb74e5d6658a177fee02 Mon Sep 17 00:00:00 2001
From: Shuide Chen <shuide.chen@amlogic.com>
Date: Thu, 20 May 2021 15:55:52 +0800
Subject: [PATCH] memory: not cache gpu data for persist service

Signed-off-by: Shuide Chen <shuide.chen@amlogic.com>
Change-Id: I8fe38f029da5bf0d828f1a76dead2d64cecffd6a
---
 src/gpu/GrResourceCache.cpp | 58 +++++++++++++++++++++++++++++++++++++
 1 file changed, 58 insertions(+)

diff --git a/src/gpu/GrResourceCache.cpp b/src/gpu/GrResourceCache.cpp
index b42762f397..9db3cba751 100644
--- a/src/gpu/GrResourceCache.cpp
+++ b/src/gpu/GrResourceCache.cpp
@@ -25,6 +25,49 @@
 #include "src/gpu/GrTracing.h"
 #include "src/gpu/SkGr.h"
 
+#if defined(ANDROID)
+    #include <fcntl.h>
+    #include <cutils/properties.h>
+#endif
+
+static int32_t __getOomAdj() {
+    int32_t fd, len;
+    #define MAX_READ_LEN 64
+    char str[MAX_READ_LEN];
+    memset(str, 0, MAX_READ_LEN);
+    if ((fd = open("/proc/self/oom_score_adj", O_RDONLY)) < 0) {
+        return 0;
+    }
+
+    len = read(fd, str, MAX_READ_LEN);
+    if (len <= 0) {
+        close(fd);
+        return 0;
+    }
+    close(fd);
+
+    if (len != MAX_READ_LEN) {
+        return atoi(str);
+    }
+
+    return 0;
+}
+
+static bool isLowRamDevice() {
+    char prop[PROP_VALUE_MAX];
+    property_get("ro.config.low_ram", prop, "false");
+    return strncmp(prop, "true", 4) == 0;
+}
+
+static bool shouldOverrideCacheLimit() {
+    if (!isLowRamDevice()) return false;
+
+    if (__getOomAdj() < 0 || __getOomAdj() >= 900)
+        return true;
+
+    return false;
+}
+
 DECLARE_SKMESSAGEBUS_MESSAGE(GrUniqueKeyInvalidatedMessage);
 
 DECLARE_SKMESSAGEBUS_MESSAGE(GrTextureFreedMessage);
@@ -124,6 +167,7 @@ GrResourceCache::~GrResourceCache() {
 }
 
 void GrResourceCache::setLimit(size_t bytes) {
+    if (shouldOverrideCacheLimit()) bytes = 1024;
     fMaxBytes = bytes;
     this->purgeAsNeeded();
 }
@@ -429,6 +473,20 @@ void GrResourceCache::notifyRefCntReachedZero(GrGpuResource* resource) {
     resource->cacheAccess().setTimeWhenResourceBecomePurgeable();
     fPurgeableBytes += resource->gpuMemorySize();
 
+    // no need keep cache for persist/system and less important app.
+    // persist app almost run in background, do not keep cached memory for it, it's wasted too much.
+    // only for low ram devices
+#if defined(ANDROID)
+    {
+        if (shouldOverrideCacheLimit()) {
+            SkDebugf("directly release gpu cache!");
+            resource->cacheAccess().release();
+            this->validate();
+            return;
+        }
+    }
+#endif
+
     bool hasUniqueKey = resource->getUniqueKey().isValid();
 
     GrBudgetedType budgetedType = resource->resourcePriv().budgetedType();
-- 
2.26.1

